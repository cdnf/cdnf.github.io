<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>搜百谷</title>
  
  <subtitle>达则兼济天下尤物，懒人改变世界劳模！</subtitle>
  <link href="https://sobaigu.com/atom.xml" rel="self"/>
  
  <link href="https://sobaigu.com/"/>
  <updated>2024-01-27T02:19:36.000Z</updated>
  <id>https://sobaigu.com/</id>
  
  <author>
    <name>凹凸曼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用 linux jq 命令语法整理</title>
    <link href="https://sobaigu.com/linux-jq-syntax-list.html"/>
    <id>https://sobaigu.com/linux-jq-syntax-list.html</id>
    <published>2024-01-27T02:19:36.000Z</published>
    <updated>2024-01-27T02:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期准备对 <a href="/xrayr-auto-shell-for-v2board.html">自用的一个 shell</a> 进行完善，有些增删改应该用 <code>jq</code> 来做应该事半功倍一点，将之前整理的一些资料一并做整理做个记录，方便后续查找学习。</p><span id="more"></span><h2 id="语法命令对照表"><a href="#语法命令对照表" class="headerlink" title="语法命令对照表"></a>语法命令对照表</h2><table><thead><tr><th align="left"><strong>语法</strong></th><th>json</th><th>命令</th><th>result str</th><th>说明</th></tr></thead><tbody><tr><td align="left"><strong>.</strong></td><td>“Hello, world!”</td><td>jq ‘.’</td><td>“Hello, world!”</td><td></td></tr><tr><td align="left"></td><td>{“foo”: 42, “bar”: “less interesting data”}</td><td>jq ‘.foo’</td><td>42</td><td>返回对象foo key 值</td></tr><tr><td align="left"></td><td>{“notfoo”: true, “alsonotfoo”: false}</td><td>jq ‘.foo’</td><td>null</td><td>对象key不存在，返回null</td></tr><tr><td align="left"><strong>.[]</strong></td><td>[1,2,3]</td><td>jq ‘.[]’</td><td>1<br> 2 <br> 3</td><td>元素遍历</td></tr><tr><td align="left"></td><td>{“a”: 1, “b”: 2}</td><td>jq ‘.[]’</td><td>1 <br>2</td><td>key 对值遍历</td></tr><tr><td align="left"><strong>.[&lt;string&gt;]</strong></td><td>{“foo”: 42}</td><td>jq .[“foo”]</td><td>42</td><td>获取key 对应值</td></tr><tr><td align="left"><strong>.[&lt;value&gt;]</strong></td><td>[{“name”:“JSON”, “good”:true}, {“name”:“XML”, “good”:false}]</td><td>jq ‘.[0]’</td><td>{“name”:“JSON”, “good”:true}</td><td>返回1下标元素</td></tr><tr><td align="left"></td><td>[1,2,3]</td><td>jq ‘.[-2]’</td><td>2</td><td>返回倒数两个位置元素</td></tr><tr><td align="left"><strong>.[start:end]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[2:4]’</td><td>[“c”, “d”]</td><td>下标开始到下标结束的元素</td></tr><tr><td align="left"></td><td>“abcdefghi”</td><td>jq ‘.[2:4]’</td><td>“cd”</td><td>下标开始到下标结束的字符</td></tr><tr><td align="left"><strong>.[:end]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[:3]’</td><td>[“a”, “b”, “c”]</td><td>首个元素到指定下标元素之间的元素</td></tr><tr><td align="left"><strong>.[start:]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[-2:]’</td><td>[“d”, “e”]</td><td>指定下标开始到未元素之间的元素</td></tr><tr><td align="left"><strong>,</strong></td><td>{“foo”: 42, “bar”: “something else”, “baz”: true}</td><td>jq ‘.foo, .bar’</td><td>42, “something else”</td><td>获取多个key值</td></tr><tr><td align="left"></td><td>{“user”:“stedolan”, “projects”: [“jq”, “wikiflow”]}</td><td>jq ‘.user, .projects[]’</td><td>“stedolan”, “jq”, “wikiflow”</td><td>b取多个元素的值</td></tr><tr><td align="left"></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[4,2]’</td><td>“e”, “c”</td><td>取4 和 2 下标元素</td></tr><tr><td align="left"><strong>|</strong></td><td>[{“name”:“JSON”, “good”:true}, {“name”:“XML”, “good”:false}]</td><td>jq ‘.[] | .name’</td><td>“JSON”, “XML”</td><td>管道</td></tr><tr><td align="left"><strong>[]</strong></td><td>{“user”:“stedolan”, “projects”: [“jq”, “wikiflow”]}</td><td>jq ‘[.user, .projects[]]’</td><td>[“stedolan”, “jq”, “wikiflow”]</td><td>元素值组成新数组</td></tr><tr><td align="left"></td><td>[1, 2, 3]</td><td>jq ‘[ .[] | . * 2]’</td><td>[2, 4, 6]</td><td>元素值组成新数组</td></tr><tr><td align="left"><strong>{}</strong></td><td>[{“user”:“stedolan”, “title”: “JQ Primer”}]</td><td>jq ‘.[] | <strong>{user,</strong> <strong>title}</strong>’</td><td>{“user”:“stedolan”, “title”: “JQ Primer”}</td><td>组成对象(使用原key名)</td></tr><tr><td align="left"></td><td>[{“user”:“stedolan”, “title”: “JQ Primer”}]</td><td>jq ‘.[] | {user1: .user, title: .title}’</td><td>{“user1”:“stedolan”, “title”: “JQ Primer”}</td><td>组成对象(改变key名)</td></tr><tr><td align="left"><strong>+</strong></td><td>{“a”: 7}</td><td>jq ‘.a + 1’</td><td>8</td><td>算术运算符</td></tr><tr><td align="left"></td><td>{“a”: [1,2], “b”: [3,4]}</td><td>jq ‘.a + .b’</td><td>[1,2,3,4]</td><td>数组元素合并</td></tr><tr><td align="left"></td><td></td><td>jq ‘{a: 1} + {b: 2} + {c: 3} + {a: 42}’</td><td>{“a”: 42, “b”: 2, “c”: 3}</td><td>合并属性</td></tr><tr><td align="left"><strong>-</strong></td><td>{“a”:3}</td><td>jq ‘4 - .a’</td><td>1</td><td>算术运算符</td></tr><tr><td align="left"></td><td>[“xml”, “yaml”, “json”]</td><td>jq ‘. - [“xml”, “yaml”]’</td><td>[“json”]</td><td>删除指定数组内元素</td></tr><tr><td align="left"><strong>&#x2F;</strong></td><td>5</td><td>jq ‘10 &#x2F; . ’</td><td>2</td><td>算术运算符</td></tr><tr><td align="left"></td><td>“a,b,c,d,e”</td><td>jq ‘. &#x2F; “,”’</td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>字符串分隔成数组</td></tr><tr><td align="left"><strong>length</strong></td><td>[1,2]</td><td>jq ‘. | length’</td><td>2</td><td>数组元素个数</td></tr><tr><td align="left"></td><td>“string”</td><td>jq ‘. | length’</td><td>6</td><td>string 的长度</td></tr><tr><td align="left"></td><td>{“a”:2}</td><td>jq ‘. | length’</td><td>1</td><td>对象key个数</td></tr><tr><td align="left"><strong>keys</strong></td><td>[“a”,“b”,“c”]</td><td>jq ’ . | keys’</td><td>[0,1,2]</td><td>数组下标数组</td></tr><tr><td align="left"></td><td>{“abc”: 1, “abcd”: 2, “Foo”: 3}</td><td>jq ’ . | keys’</td><td>[“Foo”, “abc”, “abcd”]</td><td>kye数组</td></tr><tr><td align="left"><strong>has(key)</strong></td><td>{“abc”: 1, “abcd”: 2, “Foo”: 3}</td><td>jq ‘. | has(“abc”)’</td><td>true</td><td>是否包含key</td></tr><tr><td align="left"><strong>map(x)</strong></td><td>[1,2,3]</td><td>jq ‘map(.+1)’</td><td>[2,3,4]</td><td>元素遍历</td></tr><tr><td align="left"><strong>map_values(x)</strong></td><td>{“a”: 1, “b”: 2, “c”: 3}</td><td>jq ‘map_values(.+1)’</td><td>{“a”: 2, “b”: 3, “c”: 4}</td><td>对象值遍历</td></tr><tr><td align="left"><strong>del(path_expression)</strong></td><td>{“foo”: 42, “bar”: 9001, “baz”: 42}</td><td>jq ‘del(.foo)’</td><td>{“bar”: 9001, “baz”: 42}</td><td>删除key</td></tr><tr><td align="left"></td><td>[“foo”, “bar”, “baz”]</td><td>jq ‘del(.[1, 2])’</td><td>[“foo”]</td><td>删除元素</td></tr><tr><td align="left"><strong>getpath(PATHS)</strong></td><td>{“a”:{“b”:0, “c”:1}}</td><td>jq ‘[getpath([“a”,“b”], [“a”,“c”])]’</td><td>[0, 1]</td><td>获取指定值</td></tr><tr><td align="left"><strong>setpath(PATHS;</strong> <strong>VALUE)</strong></td><td>{“a”:{“b”:0}}</td><td>jq ‘setpath([“a”,“b”]; 1)’</td><td>{“a”: {“b”: 1}}</td><td>设置指定值</td></tr><tr><td align="left"></td><td></td><td>jq ‘setpath([0,“a”]; 1)’</td><td>[{“a”:1}]</td><td>设置指定值</td></tr><tr><td align="left"><strong>select(boolean_expression)</strong></td><td>[1,5,3,0,7]</td><td>jq ‘map(select(. &gt;&#x3D; 2))’</td><td>[5,3,7]</td><td>select</td></tr><tr><td align="left"></td><td>[{“id”: “first”, “val”: 1}, {“id”: “second”, “val”: 2}]</td><td>jq ‘.[] | select(.id &#x3D;&#x3D; “second”)’</td><td>{“id”: “second”, “val”: 2}</td><td>select</td></tr><tr><td align="left"><strong>arrays,</strong> <strong>objects,</strong> <strong>iterables,</strong> <strong>booleans,</strong> <strong>numbers,</strong> <strong>normals,</strong> <strong>finites,</strong> <strong>strings,</strong> <strong>nulls,</strong> <strong>values,</strong> <strong>scalars</strong></td><td>[[],{},1,“foo”,null,true,false]</td><td>jq ‘.[] | numbers’</td><td>1</td><td>从数组中取指定类型值</td></tr><tr><td align="left"><strong>add</strong></td><td>[“a”,“b”,“c”]</td><td>jq ‘add’</td><td>“abc”</td><td>字符串元素拼接</td></tr><tr><td align="left"></td><td>[1, 2, 3]</td><td>jq ‘add’</td><td>6</td><td>sum</td></tr><tr><td align="left"><strong>any,</strong> <strong>any(condition),</strong> <strong>any(generator;</strong> <strong>condition)</strong></td><td>[true, false]</td><td>jq ‘any’</td><td>true</td><td>有一个元素是true返回true</td></tr><tr><td align="left"></td><td>[false, false]</td><td>jq ‘any’</td><td>false</td><td></td></tr><tr><td align="left"></td><td>[]</td><td>jq ‘any’</td><td>false</td><td></td></tr><tr><td align="left"></td><td>[1,2,3]</td><td>jq ‘any(. &gt; 1)’</td><td>true</td><td></td></tr><tr><td align="left"><strong>all,</strong> <strong>all(condition),</strong> <strong>all(generator;</strong> <strong>condition)</strong></td><td>[true, false]</td><td>jq ‘all’</td><td>false</td><td>所有元素是true返回true</td></tr><tr><td align="left"><strong>range(upto),</strong> <strong>range(from;upto)</strong> <strong>range(from;upto;by)</strong></td><td></td><td>jq ‘[range(4)]’</td><td>[0,1,2,3]</td><td>步进</td></tr><tr><td align="left"></td><td></td><td>jq ‘range(2;4)’</td><td>2, 3</td><td></td></tr><tr><td align="left"></td><td></td><td>jq ‘[range(2;4)]’</td><td>[2,3]</td><td></td></tr><tr><td align="left"></td><td></td><td>jq ‘[range(0;10;3)]’</td><td>[0,3,6,9]</td><td></td></tr><tr><td align="left"></td><td></td><td>jq ‘[range(0;-5;-1)]’</td><td>[0,-1,-2,-3,-4]</td><td></td></tr><tr><td align="left"><strong>floor</strong></td><td>3.14159</td><td>jq ‘floor’</td><td>3</td><td>取整</td></tr><tr><td align="left"><strong>sqrt</strong></td><td>9</td><td>jq ‘sqrt’</td><td>3</td><td>开根</td></tr><tr><td align="left"><strong>tonumber</strong></td><td>[1, “1”]</td><td>jq ‘.[] | tonumber’</td><td>1, 1</td><td>转数字</td></tr><tr><td align="left"><strong>tostring</strong></td><td>[1, “1”, [1]]</td><td>jq ‘.[] | tostring’</td><td>[“1”, “1”, “[1]”]</td><td>转json 字符串</td></tr><tr><td align="left"><strong>type</strong></td><td>[0, false, [], {}, null, “hello”]</td><td>jq ‘map(type)’</td><td>[“number”, “boolean”, “array”, “object”, “null”, “string”]</td><td>查看类型</td></tr><tr><td align="left"><strong>sort,</strong> <strong>sort_by(path_expression)</strong></td><td>[8,3,null,6]</td><td>jq ‘sort’</td><td>[null,3,6,8]</td><td>order by</td></tr><tr><td align="left"></td><td>[{“foo”:4, “bar”:10}, {“foo”:3, “bar”:100}, {“foo”:2, “bar”:1}]</td><td>jq ‘sort_by(.foo)’</td><td>[{“foo”:2, “bar”:1}, {“foo”:3, “bar”:100}, {“foo”:4, “bar”:10}]</td><td></td></tr><tr><td align="left"><strong>group_by(path_expression)</strong></td><td>[{“foo”:1, “bar”:10}, {“foo”:3, “bar”:100}, {“foo”:1, “bar”:1}]</td><td>jq ‘group_by(.foo)’</td><td>[[{“foo”:1, “bar”:10}, {“foo”:1, “bar”:1}], [{“foo”:3, “bar”:100}]]</td><td>聚合函数group by</td></tr><tr><td align="left"><strong>min,</strong> <strong>max,</strong> <strong>min_by(path_exp),</strong> <strong>max_by(path_exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>unique,</strong> <strong>unique_by(path_exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>reverse</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>contains(element)</strong></td><td>“foobar”</td><td>jq ‘contains(“bar”)’</td><td>true</td><td></td></tr><tr><td align="left"></td><td>[“foobar”, “foobaz”, “blarp”]</td><td>jq ‘contains([“baz”, “bar”])’</td><td>true</td><td></td></tr><tr><td align="left"></td><td>[“foobar”, “foobaz”, “blarp”]</td><td>jq ‘contains([“bazzzzz”, “bar”])’</td><td>false</td><td></td></tr><tr><td align="left"></td><td>{“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]}</td><td>jq ‘contains({foo: 12, bar: [{barp: 12}]})’</td><td>true</td><td></td></tr><tr><td align="left"></td><td>{“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]}</td><td>jq ‘contains({foo: 12, bar: [{barp: 15}]})’</td><td>false</td><td></td></tr><tr><td align="left"><strong>indices(s)</strong></td><td>“a,b, cd, efg, hijk”</td><td>jq ‘indices(“, “)’</td><td>[3,7,12]</td><td>返回出现元素下标位置集合</td></tr><tr><td align="left"></td><td>[0,1,2,1,3,1,4]</td><td>jq ‘indices(1)’</td><td>[1,3,5]</td><td></td></tr><tr><td align="left"></td><td>[0,1,2,3,1,4,2,5,1,2,6,7]</td><td>jq ‘indices([1,2])’</td><td>[1,8]</td><td>参数s可以输入为数组</td></tr><tr><td align="left"><strong>index(s),</strong> <strong>rindex(s)</strong></td><td>“a,b, cd, efg, hijk”</td><td>jq ‘index(“, “)’</td><td>3</td><td>indexof</td></tr><tr><td align="left"></td><td>“a,b, cd, efg, hijk”</td><td>jq ‘rindex(“, “)</td><td>12</td><td>lastIndexOf</td></tr><tr><td align="left"><strong>inside</strong></td><td>“bar”</td><td>jq ‘inside(“foobar”)’</td><td>true</td><td>包含元素</td></tr><tr><td align="left"></td><td>{“foo”: 12, “bar”: [{“barp”: 15}]}</td><td>jq ‘inside({“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]})’</td><td>false</td><td></td></tr><tr><td align="left"><strong>startswith(str)</strong></td><td>[“fo”, “foo”, “barfoo”, “foobar”, “barfoob”]</td><td>jq ‘[.[] | startswith(“foo”)]’</td><td>[false, true, false, true, false]</td><td>开始于</td></tr><tr><td align="left"><strong>endswith(str)</strong></td><td></td><td></td><td></td><td>结束于</td></tr><tr><td align="left"><strong>combinations,</strong> <strong>combinations(n)</strong></td><td>[[1,2], [3, 4]]</td><td>jq ‘combinations’</td><td>[1, 3], [1, 4], [2, 3], [2, 4]</td><td>组合_笛卡尔积_</td></tr><tr><td align="left"></td><td>[0, 1]</td><td>jq ‘combinations(2)’</td><td>[0, 0], [0, 1], [1, 0], [1, 1]</td><td></td></tr><tr><td align="left"><strong>ltrimstr(str)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>rtrimstr(str)</strong></td><td>[“fo”, “foo”, “barfoo”, “foobar”, “afoo”]</td><td>jq ‘[.[] | ltrimstr(“foo”)]’</td><td>[“fo”,””,“barfoo”,“bar”,“afoo”]</td><td></td></tr><tr><td align="left"><strong>split(str)</strong></td><td></td><td></td><td></td><td>split</td></tr><tr><td align="left"><strong>join(str)</strong></td><td>[“a”,1,2.3,true,null,false]</td><td>jq ‘join(“ “)’</td><td>“a 1 2.3 true false”</td><td>转string指定分隔符</td></tr><tr><td align="left"><strong>while(cond;</strong> <strong>update)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>until(cond;</strong> <strong>next)</strong></td><td>4</td><td>jq ‘[.,1]</td><td>until(.[0] &lt; 1; [.[0] - 1, .[1] * .[0]]) | .[1]’</td><td>24 (4*3*2*1)</td></tr><tr><td align="left"><strong>foreach</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left">tojson</td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>Format</strong> <strong>strings</strong> <strong>and</strong> <strong>escaping</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@text</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@json</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@html</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@uri</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@csv</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@tsv</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@sh</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td align="left"><strong>@base64</strong></td><td>“This is a message”</td><td>jq ‘@base64</td><td>“VGhpcyBpcyBhIG1lc3NhZ2U&#x3D;”</td><td>加密</td></tr><tr><td align="left"><strong>@base64d</strong></td><td>###</td><td>###</td><td></td><td>解密</td></tr><tr><td align="left"><strong>=&#x3D;,</strong> <strong>!&#x3D;</strong> <strong>&gt;,</strong> <strong>&gt;&#x3D;,</strong> <strong>&lt;&#x3D;,</strong> <strong>&lt;</strong> <strong>and&#x2F;or&#x2F;not</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>+&#x3D;,</strong> <strong>-&#x3D;,</strong> *<strong>=,</strong> <strong>&#x2F;&#x3D;,</strong> <strong>%&#x3D;,</strong> <strong>&#x2F;&#x2F;&#x3D;</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>if</strong> <strong>A</strong> <strong>then</strong> <strong>elif</strong> <strong>B</strong> <strong>else</strong> <strong>C</strong> <strong>end</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>&#x2F;&#x2F;</strong></td><td>{}</td><td>jq ‘.foo &#x2F;&#x2F; 42’</td><td>42</td><td>提供默认值</td></tr><tr><td align="left"><strong>isempty(exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td align="left"><strong>limit(n;</strong> <strong>exp)</strong></td><td>[0,1,2,3,4,5,6,7,8,9]</td><td>jq ‘[limit(3;.[])]’</td><td>[0,1,2]</td><td></td></tr><tr><td align="left"><strong>first(expr),</strong> <strong>last(expr),</strong> <strong>nth(n;</strong> <strong>expr)</strong></td><td>10</td><td>jq ‘[first(range(.)), last(range(.)), nth(.&#x2F;2; range(.))]’</td><td>[0,9,5]</td><td></td></tr><tr><td align="left"><strong>first,</strong> <strong>last,</strong> <strong>nth(n)</strong></td><td>10</td><td>jq ‘[range(.)] | [first, last, nth(5)]’</td><td>[0,9,5]</td><td></td></tr><tr><td align="left"><strong>?</strong></td><td></td><td></td><td></td><td>忽略异常</td></tr><tr><td align="left"></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/Cheat1173010256/article/details/118230562">常用 linux jq 命令语法整理</a></li><li><a href="https://blog.csdn.net/whatday/article/details/125859796">linux shell jq命令 合并json文件</a></li><li><a href="https://juejin.cn/s/jq%20append%20json%20array">jq append json array</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html">jq 常用操作</a></li><li><a href="https://www.tomczhen.com/2017/10/15/parsing-json-with-shell-script/">使用 Shell 脚本来处理 JSON</a></li><li><a href="https://www.jianshu.com/p/6de3cfdbdb0e">jq简易教程</a></li><li><a href="https://www.jianshu.com/p/00ce505c5e53">jq基本用法：读取访问</a></li><li><a href="https://alingse.github.io/jq-manual-cn">jq中文手册</a></li><li><a href="https://jqplay.org/#">A playground for jq</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期准备对 &lt;a href=&quot;/xrayr-auto-shell-for-v2board.html&quot;&gt;自用的一个 shell&lt;/a&gt; 进行完善，有些增删改应该用 &lt;code&gt;jq&lt;/code&gt; 来做应该事半功倍一点，将之前整理的一些资料一并做整理做个记录，方便后续查找学习。&lt;/p&gt;</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>宝塔邮局优化解决 `hostname` 信息得分大幅提升</title>
    <link href="https://sobaigu.com/software-postfix-mailinfo-hostname.html"/>
    <id>https://sobaigu.com/software-postfix-mailinfo-hostname.html</id>
    <published>2024-01-23T06:20:29.000Z</published>
    <updated>2024-01-23T06:20:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前怀疑宝塔邮局到达率，实际上邮件测试也只有3.5分，所以最近一直在折腾邮件系统。iRedMail 折腾了好几遍，可最终还留下个暂时解决不了的问题：客户端SMTP发信时提示连接服务器失败。</p><p>客户端可以收信，系统各端口访问正常，网页版收发信件也没问题，发出的信件经 <code>mail-tester.com</code> 测试分值几乎满分。可惜，就是解决不了不能外部发信的问题。</p><p>有了折腾 iRedMail 的经验，回过头再来优化下宝塔邮局。</p><h1 id="优化项目"><a href="#优化项目" class="headerlink" title="优化项目"></a>优化项目</h1><p>邮件测试显示存在的问题主要有：</p><ol><li>PTR 记录不过关</li><li>主机xxx与xx不匹配，具体忘记截图了</li></ol><p>既然知道问题了，那就朝提示的信息请优化。</p><h2 id="各种DNS解析"><a href="#各种DNS解析" class="headerlink" title="各种DNS解析"></a>各种DNS解析</h2><p>以下各种记录，请根据自己服务器实际情况设置，一般邮件系统会提示。设置完可以通过以下命令验证，也可以通过网站查询：<a href="https://www.whatsmydns.net/">https://www.whatsmydns.net/</a></p><h2 id="PTR（rDNS）"><a href="#PTR（rDNS）" class="headerlink" title="PTR（rDNS）"></a>PTR（rDNS）</h2><p>就是通过IP反查主机名，一般VPS后台能自己绑定，不能绑定的给服务商发工单处理。<br>设置好后，可以用此命令测试结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 8.8.8.8 服务器IP</span><br></pre></td></tr></table></figure><h2 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h2><p>就是把域名解析到你邮件服务器：</p><ul><li>类型：<code>A</code></li><li>名称：如 <code>mail</code></li><li>记录值： 如 <code>10x.16x.19x.11x</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup mail.xxxx.win</span><br></pre></td></tr></table></figure><h2 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h2><p>配置内容：</p><ul><li>类型：<code>MX</code></li><li>名称：<code>@</code> 或一级域名如 <code>xxxx.win</code></li><li>邮件服务器：就是前一步做A记录的那个，如 <code>mail.xxxx.win</code></li></ul><p>查询验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=mx xxxx.win</span><br></pre></td></tr></table></figure><h2 id="SPF记录"><a href="#SPF记录" class="headerlink" title="SPF记录"></a>SPF记录</h2><ul><li>类型：TXT</li><li>名称：<code>@</code> 或一级域名如 <code>xxxx.win</code></li><li>内容：<code>v=spf1 mx ~all</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt xxxx.win</span><br></pre></td></tr></table></figure><h2 id="DMARC记录"><a href="#DMARC记录" class="headerlink" title="DMARC记录"></a>DMARC记录</h2><ul><li>类型：TXT</li><li>名称：<code>_dmarc</code></li><li>内容：<code>v=DMARC1; p=none; pct=100; rua=mailto:admin@xxxx.win</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt _dmarc.xxxx.win</span><br></pre></td></tr></table></figure><h2 id="DKIM记录"><a href="#DKIM记录" class="headerlink" title="DKIM记录"></a>DKIM记录</h2><ul><li>类型：TXT</li><li>名称：<code>default._domainkey</code> 或者 <code>dkim._domainkey</code> ，根据邮件系统提示来，宝塔邮局是 <code>default._domainkey</code></li><li>内容：<code>v=DKIM1;k=rsa;p=MIG……</code> ，这是一串很长的字符串，iRedMail 需要去除双引号和换行拼接，宝塔邮局提供直接复制。</li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt default._domainkey.xxxx.win</span><br><span class="line">nslookup -<span class="built_in">type</span>=txt dkim._domainkey.xxxx.win</span><br></pre></td></tr></table></figure><p>如果记录验证不通过，收件方将提示邮件发送者不可信，查看看到如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkim=fail(Bad signature)</span><br></pre></td></tr></table></figure><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>这个主机名比较坑，可以用 <code>hostname -f</code> 查询，见<a href="/software-iRedMail-hosts.html">本站之前的记录文章</a>。</p><p>在设置完这些后，<code>postfix</code> 给留了个坑，查看邮件原文可见老的 <code>hostname</code> 信息，这个信息是很早之前的 <code>hostname</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Received: from xxx-4aebdd ([2607:f130:0:f3::aaaa:aaaa])</span><br><span class="line">by newxmmxszc96.qq.com (NewMX) with SMTP <span class="built_in">id</span> E1720475</span><br><span class="line"><span class="keyword">for</span> &lt;admin@qq.com&gt;; Mon, 29 Nov 2021 08:56:23 +0800</span><br><span class="line">X-QQ-mid: xmmxszc96t163814xxxxtebzr1d2z</span><br><span class="line">X-QQ-XMAILINFO: MOGuJKokHloM75uz8dxxxrH+vnbIE9n1iuJzmAhtVuxVfxxxx6/hFesAIIJaU9</span><br><span class="line"> ttUm/awDNtZJ+IxEnNjlQ03GOcxgTNOmjGMSxxxxW7</span><br><span class="line">   ...</span><br><span class="line">Received: from [127.0.0.1] (localhost [127.0.0.1])</span><br><span class="line">by xxx-4aebdd (Postfix) with ESMTPA <span class="built_in">id</span> 3473260EDB</span><br></pre></td></tr></table></figure><p>本来第一怀疑就是 <code>postfix</code> 配置文件 <code>/etc/postfix/main.cf</code>，可宝塔邮局界面上打开此配置文件按主机名关键词搜索却无任何匹配，一直信了宝塔的搜索结果。最后通过 vi 打开搜索才发现是宝塔的坑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myhostname = mail.xxxx.win  //将此行设置为你想展示的主机信息</span><br></pre></td></tr></table></figure><p>这个应该是 <code>postfix</code> 在安装的时候自动取的 <code>hostname</code> 值，网上有些说法是为了安全，还需要加其他的过滤规则插件将主机信息隐藏，不知道是否会影响反垃圾邮件，暂且不管。</p><h1 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h1><p>经以上优化设置后，垃圾邮件测试一番，效果满意，宝塔邮局也可以战！</p><blockquote><p>WOW! 完美，你现在可以开始发送了。<br>得分 ： 9.5&#x2F;10</p></blockquote><blockquote><p>SpamAssassin喜欢你</p><p>你的发件人身份已验证。</p><ul><li>[SPF] 你的发件服务器 10x.16x.19x.11x 授权使用该发件地址 <a href="mailto:&#x6e;&#111;&#114;&#x65;&#112;&#108;&#x79;&#64;&#x78;&#x78;&#120;&#x78;&#46;&#x77;&#105;&#x6e;">&#x6e;&#111;&#114;&#x65;&#112;&#108;&#x79;&#64;&#x78;&#x78;&#120;&#x78;&#46;&#x77;&#105;&#x6e;</a></li><li>你的 DKIM 签名有效。</li><li>您的邮件通过了 DMARC 测试</li><li>你的发件服务器 10x.16x.19x.11x 与 mail.xxxx.win 成功关联。</li><li>Your domain name xxxx.win is assigned to a mail server.</li><li>你的主机名mail.xxxx.win已分配了一台邮件服务器。</li></ul><p>Your message could be improved</p><p>你的发件IP在1个黑名单中。</p><ul><li>将你的服务器IP地址 (10x.16x.19x.11x) 与 24 个最常见的 IPv4 黑名单进行匹配。被列入 Barracuda ( -0.5 )</li></ul></blockquote>]]></content>
    
    
    <summary type="html">之前怀疑宝塔邮局到达率，实际上邮件测试也只有3.5分，所以最近一直在折腾邮件系统。iRedMail 折腾了好几遍，可最终还留下个暂时解决不了的问题：客户端SMTP发信时提示连接服务器失败。
客户端可以收信，系统各端口访问正常，网页版收发信件也没问题，发出的信件经 `mail-tester.com` 测试分值几乎满分。可惜，就是解决不了不能外部发信的问题。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>设置Git通过代理连接，解决GitHub仓库无法更新等</title>
    <link href="https://sobaigu.com/git-set-proxy-for-github.html"/>
    <id>https://sobaigu.com/git-set-proxy-for-github.html</id>
    <published>2024-01-22T04:39:47.000Z</published>
    <updated>2024-01-22T04:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 GitHub 各种问题，把4年前攒的知识重新翻出来，陈年知识又重见天日了。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于某种原因，某些地区无法正常访问GitHub这个全球最大同性交友社区，造成一批死肥宅无法愉快搞基。<br>虽然挂代理后网页能开了，但在使用Git工具拉取和推送仓库这种体力活仍然不得行，哪怕是已经在代理客户端上设置了使用全局代理，尤其是使用vmess代理的时候，此时我们可以尝试对Git进行额外代理设置。</p><h2 id="设置命令"><a href="#设置命令" class="headerlink" title="设置命令"></a>设置命令</h2><p>Git设置或取消代理方式连接网络，只需要执行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置使用http/https本地代理</span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> https:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">#取消http/https本地代理</span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>以上方式如果还不能解决，可以再次尝试设置sock5代理：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.proxy</span> <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure><p>如果只针对GitHub设置代理，则用如下命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只对github.com</span></span><br><span class="line">git config <span class="params">--global</span> http.https:<span class="string">//github.com.proxy</span> socks5:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br></pre></td></tr></table></figure><p>对于使用 <code>ssh://</code> 协议的，可以配置socks5代理，在 <code>~/.ssh/config</code> 文件内容后面添加几行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">ProxyCommand connect -S <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> %h %p</span><br></pre></td></tr></table></figure><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>hexo等发布到GitHub时失败，错误提示：“xx time out”</li><li>更新GitHub仓库无响应<blockquote><p>$ git push<br>ssh: connect to host github.com port 22: Network is unreachable<br>fatal: The remote end hung up unexpectedly</p></blockquote></li><li>拉取或者提交代码时超时报错<blockquote><p>[info] ssh: connect to host github.com port 22: Connection timed out<br>         fatal: Could not read from remote repository.</p><pre><code>   Please make sure you have the correct access rights   and the repository exists.</code></pre></blockquote></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://gist.github.com/laispace/666dd7b27e9116faece6">git 设置和取消代理</a></li></ol>]]></content>
    
    
    <summary type="html">由于某种原因，某些地区无法正常访问GitHub这个全球最大同性交友社区，造成一批死肥宅无法愉快搞基。 虽然挂代理后网页能开了，但在使用Git工具拉取和推送仓库这种体力活仍然不得行，哪怕是已经在代理客户端上设置了使用全局代理，尤其是使用vmess代理的时候，此时我们可以尝试对Git进行额外代理设置。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="混技能" scheme="https://sobaigu.com/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"/>
    
    <category term="Hexo" scheme="https://sobaigu.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>php composer.phar update：A facade root has not been set</title>
    <link href="https://sobaigu.com/composer-upgrade-error-A-facade-root-has-not-been-set.html"/>
    <id>https://sobaigu.com/composer-upgrade-error-A-facade-root-has-not-been-set.html</id>
    <published>2024-01-18T08:04:55.000Z</published>
    <updated>2024-01-18T08:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近缅A丢失一辆车，2024年才开始几个工作日，打工人根本无心上班……</p><p>有个很多年的关系户跑来说订阅不到节点了，问我这个搞技术的还能不能干？虽然缅A丢了车钱，但咱不能丢技术，虽然关系户并没有赞助半毛钱一直蹭着俺的小鸡鸡！</p><span id="more"></span><h2 id="然后手贱开始了"><a href="#然后手贱开始了" class="headerlink" title="然后手贱开始了"></a>然后手贱开始了</h2><p>虽然自己用着没什么问题，但有人提意见就干脆升级把程序，以转移部分缅A赔钱之苦，结果 <code>php composer.phar update -vvv</code> 时报错，后台也登录不进去了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught <span class="built_in">RuntimeException</span>: A facade root has not been set. </span><br><span class="line">in /www/wwwroot/v2board/vendor/laravel/framework/src/Illuminate/Support/Facades/Facade.php:<span class="number">258</span></span><br></pre></td></tr></table></figure><p>翻出第258行的代码，也不知道 <code>getFacadeRoot</code> 是个啥：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$instance</span> = <span class="built_in">static</span>::<span class="title function_ invoke__">getFacadeRoot</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$instance</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;A facade root has not been set.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$instance</span>-&gt;<span class="variable">$method</span>(...<span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><p>查阅了大量资料，258行 <code>Uncaught RuntimeException</code> 的问题都不少，其中 <a href="https://copyprogramming.com/howto/uncaught-runtimeexception-a-facade-root-has-not-been-set-in-facade-php-258-when-upgrading-to-laravel-7">这个记录</a> 最贴切：</p><blockquote><p>Runtime Exception Not Caught: Facade Root Not Set in Facade.php:258 During Laravel 7 Upgrade</p></blockquote><p>但翻来翻去都是教怎么改代码，怎么用正确的函数，很明显这不适合本次问题，因为半吊子工程师这些次提交改的代码并没有触及那一块。</p><p>然后看到一篇 <a href="https://www.cainiaoxueyuan.com/bc/44168.html">Laravel框架提示 A facade root has not been set</a>：</p><blockquote><p>检查下 config 目录里面的文件，新增或者修改了什么，把语法错误找出来修复</p></blockquote><p>想起最开始那位仁兄说不能订阅，确实改了下订阅地址，于是去翻 <code>v2board.php</code>，看花老眼终于发现在文件的倒数位置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&#x27;subscribe_path&#x27;</span> =&gt; <span class="string">&#x27;/xxxx&#x27;</span>,</span><br><span class="line">  );<span class="string">&#x27;/xxxx&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个配置没动过，但多出来这部分错乱配置可能是 v2board 自动保存机制的问题。将错误修正后升级果然一气呵成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&#x27;subscribe_path&#x27;</span> =&gt; <span class="string">&#x27;/xxxx&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近缅A丢失一辆车，2024年才开始几个工作日，打工人根本无心上班……&lt;/p&gt;
&lt;p&gt;有个很多年的关系户跑来说订阅不到节点了，问我这个搞技术的还能不能干？虽然缅A丢了车钱，但咱不能丢技术，虽然关系户并没有赞助半毛钱一直蹭着俺的小鸡鸡！&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>阿里云新系统一键净化初始化捷径</title>
    <link href="https://sobaigu.com/aliyuncloud-init-new-os-one-key.html"/>
    <id>https://sobaigu.com/aliyuncloud-init-new-os-one-key.html</id>
    <published>2024-01-17T12:08:36.000Z</published>
    <updated>2024-03-03T12:08:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 <a href="xrayr-auto-shell-for-v2board.html">XrayR 后端一键对接 V2board 脚本</a> 中提过在 Xshell 上添加个命令按钮 完成一些重复不变的工作，居然有人来问怎么添加……</p><p>不会添加就别用了吧，站长从来不教这种！</p><span id="more"></span><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>一般在阿里云上买小鸡，阿里云大公司不屑于提供一些方便用户使用的功能，比如：提供个ssh-key存储管理，每次都要在远程连接里现增ssh-key才行。</p><p>而且阿里云的系统镜像里总是会多几个服务，各种助手真干了啥咱也不知道，以前嫌麻烦只是用了 <a href="/vps-purge-aliyun-service.html">净化脚本</a>，现在觉得还是干脆开机之后一键DD以绝后患好些。</p><h2 id="命令助手DD系统"><a href="#命令助手DD系统" class="headerlink" title="命令助手DD系统"></a>命令助手DD系统</h2><p>在阿里云服务器管理中，新增个一键DD纯净系统脚本命令助手：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">apt install -y curl wget</span><br><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">&#x27;https://www.moeelf.com/attachment/LinuxShell/InstallNET.sh&#x27;</span>) -d 11 -v 64 -a</span><br></pre></td></tr></table></figure><p>上面的示例是用萌咖一键脚本 <code>DD</code> 成 <code>Debian11</code>，系统密码默认为：<code>MoeClub.org</code>，需要其他更多系统可查阅 <a href="https://www.moeelf.com/archives/293.html">萌咖博客</a></p><p>每个区的命令都是相互隔离的，所以费点力气每个区都增加个命令助手吧。</p><p>每次新开机器后，防火墙里添加一条放行所有的规则，然后趁还有阿里云助手可用时执行命令DD新系统，等系统DD完用 <code>xshell</code> 等终端连接使用，就没阿里云控制台什么事了。</p><h2 id="新系统基础设置"><a href="#新系统基础设置" class="headerlink" title="新系统基础设置"></a>新系统基础设置</h2><p>DD完系统后，除了改默认密码，还有些基础工作几乎每次都会做，刚好自己有这么个命令按钮，做个记录防换了管理机要重新弄：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有些系统没有sudo</span></span><br><span class="line"><span class="built_in">which</span> sudo || apt install -y sudo</span><br><span class="line"><span class="comment"># 添加个ssh-key，平常用这个认证多</span></span><br><span class="line">[[ -d ~/.ssh ]] || <span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;YOUR-PUBLIC-KEY&quot;</span> &gt;~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改称心如意的root密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:YOUR-PASSWORD&quot;</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统设置</span></span><br><span class="line">apt install -y wget curl</span><br><span class="line"><span class="comment">## 设置时区为东八区</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment">## 开启cron日志输出</span></span><br><span class="line">sed -i <span class="string">&quot;/cron/s/^#//&quot;</span> /etc/rsyslog.conf</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"><span class="comment">## 启用 ll 命令方便后续使用</span></span><br><span class="line">sed -i <span class="string">&quot;s|^# export LS_OPTIONS|export LS_OPTIONS|&quot;</span> ~/.bashrc</span><br><span class="line">sed -i <span class="string">&quot;s|^# eval |eval |&quot;</span> ~/.bashrc</span><br><span class="line">sed -i <span class="string">&quot;s|^# alias l|alias l|g&quot;</span> ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用BBR，原作者的脚本太庞杂了，自己存一份有空做些精简</span></span><br><span class="line">bash &lt;(curl -Lso- https://github.com/cdnf/shell/raw/master/tools/bbr_kernel.sh)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/jinwyp/one_click_script">Easy install latest or LTS linux kernel and enable BBR</a></li><li><a href="https://blog.ffing.cn/linux/linux-%E9%9D%9E%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">linux 非交互式修改密码</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在 &lt;a href=&quot;xrayr-auto-shell-for-v2board.html&quot;&gt;XrayR 后端一键对接 V2board 脚本&lt;/a&gt; 中提过在 Xshell 上添加个命令按钮 完成一些重复不变的工作，居然有人来问怎么添加……&lt;/p&gt;
&lt;p&gt;不会添加就别用了吧，站长从来不教这种！&lt;/p&gt;</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://sobaigu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>利用 Cloudflare worker 或 pages 免费服务反代 GitHub</title>
    <link href="https://sobaigu.com/proxy-site-with-cloudflare.html"/>
    <id>https://sobaigu.com/proxy-site-with-cloudflare.html</id>
    <published>2023-12-30T14:03:44.000Z</published>
    <updated>2023-12-30T14:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 站点经常有 <code>Timeout</code> 或 <code>Reset</code> 的情况发生，有时候又懒得开梯子，所以想零成本的做一个 GitHub 的线上代理。</p><p>刚好 CloudFlare 有免费 <code>Worker</code> 功能，同时 Cloudflare 会对静态页面做 CDN 缓存，也会加快我们访问 GitHub 的速度。</p><p>有大神写好了代码，实现对 GitHub 做全球代理，将大神们的成果抄录，以备不时之需。</p><span id="more"></span><h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><p>步骤很简单，没必要写教程，大概就是：</p><ol><li>注册 cloudflare 账号</li><li>创建 <code>worker</code> 或 <code>pages</code> 应用</li><li>粘贴代码保存并发布</li><li>绑定自定义域名</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="worker-代理-GitHub-网站"><a href="#worker-代理-GitHub-网站" class="headerlink" title="worker 代理 GitHub 网站"></a><code>worker</code> 代理 GitHub 网站</h3><p>以下代码，能实现用自己的域名打开 GitHub 站使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  async <span class="title function_">fetch</span><span class="params">(request, env)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(request.url);</span><br><span class="line">    <span class="type">const</span> <span class="variable">hostname</span> <span class="operator">=</span> _url.hostname</span><br><span class="line">    _url.hostname = <span class="string">&quot;github.com&quot;</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(_url, request);</span><br><span class="line">    req.headers.set(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;https://github.com&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">fetch</span><span class="params">(req)</span>;</span><br><span class="line">    <span class="type">let</span> <span class="variable">newres</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(res.body, res);</span><br><span class="line"></span><br><span class="line">    <span class="type">let</span> <span class="variable">location</span> <span class="operator">=</span> newres.headers.get(<span class="string">&#x27;location&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (location !== <span class="literal">null</span> &amp;&amp; location !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      location = location.replace(<span class="string">&#x27;://github.com&#x27;</span>, <span class="string">&#x27;://&#x27;</span>+hostname);</span><br><span class="line">      newres.headers.set(<span class="string">&#x27;location&#x27;</span>, location);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newres </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中 GitHub 对于 <code>Post</code> 请求，会检查 <code>Origin</code> 头，如果不是 GitHub 自身的域名，会直接返回 <code>422</code> 错误。</p><p>这里使用以下代码，将转发给 GitHub 的 <code>header</code> 覆盖 <code>Origin</code> 头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.headers.set(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;https://github.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当用户没有登录的时候，响应的 <code>Location</code> 字段会被设置为 <code>https://github.com/login</code>，这里为了避免浏览器跳转到 GitHub 官网，修改了 <code>location</code> 字段到请求域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">location</span> <span class="operator">=</span> newres.headers.get(<span class="string">&#x27;location&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (location !== <span class="literal">null</span> &amp;&amp; location !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">   location = location.replace(<span class="string">&#x27;://github.com&#x27;</span>, <span class="string">&#x27;://&#x27;</span>+hostname);</span><br><span class="line">   newres.headers.set(<span class="string">&#x27;location&#x27;</span>, location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="worker-反代指定网站"><a href="#worker-反代指定网站" class="headerlink" title="worker 反代指定网站"></a><code>worker</code> 反代指定网站</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">  <span class="string">&quot;fetch&quot;</span>,event =&gt; &#123;</span><br><span class="line">     let url=<span class="keyword">new</span> <span class="title class_">URL</span>(event.request.url);</span><br><span class="line">     url.hostname=<span class="string">&quot;abc.def.xyz&quot;</span>; <span class="comment">// 修改成自己的节点IP/域名</span></span><br><span class="line">     url.protocol=<span class="string">&#x27;https&#x27;</span>; <span class="comment">// 如为http协议请修改为http</span></span><br><span class="line">     let request=<span class="keyword">new</span> <span class="title class_">Request</span>(url,event.request);</span><br><span class="line">     event. respondWith(</span><br><span class="line">       fetch(request)</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="pages-反代指定网站"><a href="#pages-反代指定网站" class="headerlink" title="pages 反代指定网站"></a><code>pages</code> 反代指定网站</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  async <span class="title function_">fetch</span><span class="params">(request, env)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(request.url);</span><br><span class="line">    _url.hostname = _url.pathname.startsWith(<span class="string">&quot;/gh/&quot;</span>)</span><br><span class="line">      ? <span class="string">&quot;cdn.jsdelivr.net&quot;</span></span><br><span class="line">      : <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(_url, request);</span><br><span class="line">    <span class="keyword">return</span> fetch(req);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://cloud.tencent.com/developer/article/2211557">利用CloudFlare的Workers和Pages反代Github并缓存实现Github文件加速访问</a></li><li><a href="https://www.xksec.com/posts/20230317-reverse-proxy-to-github/">利用CloudFlare的Worker反代Github站点</a></li><li><a href="https://blog.misaka.rest/2023/01/22/cf-wkrs-node/">使用 CloudFlare Workers 反代节点</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;GitHub 站点经常有 &lt;code&gt;Timeout&lt;/code&gt; 或 &lt;code&gt;Reset&lt;/code&gt; 的情况发生，有时候又懒得开梯子，所以想零成本的做一个 GitHub 的线上代理。&lt;/p&gt;
&lt;p&gt;刚好 CloudFlare 有免费 &lt;code&gt;Worker&lt;/code&gt; 功能，同时 Cloudflare 会对静态页面做 CDN 缓存，也会加快我们访问 GitHub 的速度。&lt;/p&gt;
&lt;p&gt;有大神写好了代码，实现对 GitHub 做全球代理，将大神们的成果抄录，以备不时之需。&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Aria2+AriaNg打造24小时下载服务器</title>
    <link href="https://sobaigu.com/aria2-with-ariang-downlowd-server.html"/>
    <id>https://sobaigu.com/aria2-with-ariang-downlowd-server.html</id>
    <published>2023-12-26T02:01:28.000Z</published>
    <updated>2023-12-26T02:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>老司机不知道多久没下过片了，大概有好几年了，有人发了张车牌照，看上去很养眼……</p><p>那咱得去仔细研究下，发现下载速度堪忧，照这速度也不知道猴年马月能下载完。想想自己常年养着几个外网 VPS，也大都处于资源闲置状态，不如就此整个下载服务器。</p><h2 id="系统方案"><a href="#系统方案" class="headerlink" title="系统方案"></a>系统方案</h2><p>不知道哪年整过 aria 下载，那自然是按熟悉的套路来：<a href="https://github.com/mayswind/AriaNg">AriaNg</a> 作为前端管理下载任务，aria2 作为后端下载。经过筛选，看到 P3TERX 大神整了个 <a href="https://github.com/P3TERX/Aria2-Pro-Docker">Aria2 Docker</a>，功能够强大，完全能满足需求。</p><pre class="mermaid">graph LR;    AriaNg --> aria2 --files--> download_to_local & remote_player;    Browser --bt/http/ftp...--> AriaNg;</pre><script type="text/javascript" async  src="https://cdn.staticfile.org/mermaid/10.6.1/mermaid.min.js"></script><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><h3 id="安装-Aria2-Pro-Docker"><a href="#安装-Aria2-Pro-Docker" class="headerlink" title="安装 Aria2-Pro-Docker"></a>安装 Aria2-Pro-Docker</h3><p>没必要写重复的教程，直接看 <a href="https://p3terx.com/archives/docker-aria2-pro.html" title="Aria2 Pro - 更好用的 Aria2 Docker 容器镜像">P3TERX 大神的教程</a>，总的来说这个 Docker 使用 Aria2 完美配置方案，功能比较完善，镜像特点：</p><ul><li>BT 下载率高、速度快</li><li>重启后不丢失任务进度、不重复下载</li><li>删除正在下载的任务自动删除未完成的文件</li><li>下载错误自动删除未完成的文件</li><li>下载完成自动删除控制文件(.aria2后缀名文件)</li><li>下载完成自动删除种子文件(.torrent后缀名文件)</li><li>下载完成自动删除空目录</li><li>BT 下载完成自动清除垃圾文件(文件类型过滤功能)</li><li>BT 下载完成自动清除小文件(文件大小过滤功能)</li><li>有一定的防版权投诉、防迅雷吸血效果</li><li>更好的 PT 下载支持</li></ul><h3 id="部署-AriaNg"><a href="#部署-AriaNg" class="headerlink" title="部署 AriaNg"></a>部署 AriaNg</h3><p>有人把这个也放 Docker 里，但站长觉着完全没必要，Ar­i­aNg就是个前端静态页，如果用宝塔之类的部署个网站就更简单快捷，也不用多一次反代处理，还能让宝塔自动申请证书。</p><p>同样的，不写重复的教程，可参考：<a href="https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html" title="Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程">P3TERX 大神的教程</a></p><blockquote><p><strong>科普</strong>： Ar­i­aNg 只是一个静态网页，只负责发送指令给 Aria2 服务端，所填写的 <code>RPC</code> 地址和 <code>RPC 密钥</code>等设置数据只会储存在本地浏览器中，不管是在本地直接打开使用还是访问在线网页使用都只是本地浏览器到远端 Aria2 服务的 <code>RPC</code> 协议通讯。所以部署到 Web 服务器不是必要操作，对页面设置密码更是徒劳。</p></blockquote><p>以上两个弄完，随便传个种子就可以体验公网 IP 下载速度了，如果不做限速，服务器带宽能跑满，<strong>这个24小时挂机的下载服务器你值得拥有！</strong></p><p><img src="/../images/aria2-speed.png" alt="aria2高速下载"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>关于前面的安装部署，网上教程多如牛毛，但往往自己去实施的时候就遇到各种磕磕碰碰，这才是本文章要记录的重点。</p><h3 id="提示错误：认证失败"><a href="#提示错误：认证失败" class="headerlink" title="提示错误：认证失败"></a>提示错误：认证失败</h3><p>这一定是 <code>Aria2 RPC 密钥</code> 错误了，在 AriaNg 页面上打开：<code>AriaNg 设置 --》RPC……</code>，填上正确的认证密钥，就是 <code>Aria2 Docker</code> 启动时 <code>RPC_SECRET=</code> 设置的值，建议不要有空格。</p><h3 id="errorCode-x3D-1-Failed-to-bind-a-socket-cause-Name-or-service-not-known"><a href="#errorCode-x3D-1-Failed-to-bind-a-socket-cause-Name-or-service-not-known" class="headerlink" title="errorCode&#x3D;1 Failed to bind a socket, cause: Name or service not known"></a>errorCode&#x3D;1 Failed to bind a socket, cause: Name or service not known</h3><p>有以下两种可能会导致：</p><ol><li>Docker 端口未做外部映射：做端口映射，同时防火墙将端口放行</li><li>启用了https，但https不可用状态：配置https证书，见下文配置方法</li></ol><h3 id="https访问时aria2未连接"><a href="#https访问时aria2未连接" class="headerlink" title="https访问时aria2未连接"></a>https访问时aria2未连接</h3><p>当使用 <code>https</code> 协议访问前端 AriaNg 时，<code>Aria2 RPC 连接协议</code> 会被强制为 <code>Https</code> 或 <code>WebSocket(安全)</code>，此时我们需要配置 Aria2 启用安全协议及证书，编辑 Aria2 配置文件 <code>aria2.con</code>：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RPC 服务 SSL/TLS 加密, 默认：false</span></span><br><span class="line"><span class="comment"># 启用加密后必须使用 https 或者 wss 协议连接</span></span><br><span class="line"><span class="comment"># 不推荐开启，建议使用 web server 反向代理，比如 Nginx、Caddy ，灵活性更强。</span></span><br><span class="line"><span class="attr">rpc-secure</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书文件复制到映射 `/config/` 路径的地方</span></span><br><span class="line"><span class="comment"># 也可以将宝塔的证书目录做路径映射再直接配置到此处</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span></span><br><span class="line"><span class="attr">rpc-certificate</span>=/config/fullchain.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span></span><br><span class="line"><span class="attr">rpc-private-key</span>=/config/privkey.pem</span><br></pre></td></tr></table></figure><p>保存配置重启 Docker，就能愉快地使用 <code>Https</code> 或 <code>WebSocket(安全)</code> 协议连通 Aria2 了。</p><p>以上涉及的文件路径：</p><ul><li><code>aria2.con</code>：在 Docker 启动时 <code>/config</code> 映射的对应路径里，不知道的话可以用 <code>find / -name aria2.conf</code> 搜索</li><li><code>rpc-certificate</code>：以宝塔自动申请的证书位置为例，在 <code>/www/server/panel/vhost/cert/</code> 下以域名目录存放，默认认证文件为 <code>fullchain.pem</code></li><li><code>rpc-private-key</code>：同上，另一个 <code>privkey.pem</code> 即为私钥文件</li></ul><h3 id="证书配置好了，仍然报错：无法连接到-Aria2"><a href="#证书配置好了，仍然报错：无法连接到-Aria2" class="headerlink" title="证书配置好了，仍然报错：无法连接到 Aria2"></a>证书配置好了，仍然报错：<code>无法连接到 Aria2</code></h3><p>是不是域名启用了CDN？</p><p>如前文 AriaNg 科普所言：</p><blockquote><p>不管是在本地直接打开使用还是访问在线网页使用都只是本地浏览器到远端 Aria2 服务的 <code>RPC</code> 协议通讯</p></blockquote><p>也就是说是关系到通讯端口的，启用CDN后访问端口 <code>443</code>，默认是不能转发到 AriaNg 需要使用的 <code>https://xxx:6800/jsonrpc</code> 这个端口，所以需要额外做一个反代，如前文配置中的注释提示：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不推荐开启，建议使用 web server 反向代理，比如 Nginx、Caddy ，灵活性更强。</span></span><br></pre></td></tr></table></figure><p>站长一开始就没有接受 Aria2 的建议，把 cloudflare 的云朵代理关了，因为就自己用，想用 CDN 的有两条路径：</p><ol><li>将RPC通讯端口改成 CDN 支持的端口，如 cloudflare 的 <code>8443</code>，具体可以参考：<a href="/network-ports-compatible-with-cloudflare-proxy.html">Network ports compatible with Cloudflares proxy</a></li><li>再搞个单独的域名用于 RPC 通讯地址，然后该域名再反代到 RPC 的 <code>6800</code> 端口</li></ol><h3 id="文件自动归档-x2F-分类"><a href="#文件自动归档-x2F-分类" class="headerlink" title="文件自动归档&#x2F;分类"></a>文件自动归档&#x2F;分类</h3><p>所谓归档，就是将下载完成的任务文件移动到一个单独的文件夹去，默认是在下载文件夹下的 <code>completed</code> 目录，如果需要移动到其他目录，那么需要给 Docker 做相应路径映射：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v /data/downloads:/downloads \ <span class="comment"># 下载中</span></span><br><span class="line">-v /data/completed:/completed \ <span class="comment"># 下载完</span></span><br></pre></td></tr></table></figure><p>同时，修改 <code>script.conf</code>：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 文件移动设置(move.sh) ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动目标目录</span></span><br><span class="line"><span class="comment"># dest-dir=/downloads/completed # 默认配置</span></span><br><span class="line"><span class="attr">dest-dir</span>=/completed</span><br></pre></td></tr></table></figure><p>以上，每次下载完成的任务就会自动被移动到 <code>/data/completed</code> 这个目录，但由于 Docker 的限制，此移动并不是真正的移动，而是复制后删除，也就意味着磁盘会被重复全量写一遍，虽然死道友不死贫道，但貌似也没必要。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://p3terx.com/archives/docker-aria2-pro.html" title="Aria2 Pro - 更好用的 Aria2 Docker 容器镜像">Aria2 Pro - 更好用的 Aria2 Docker 容器镜像</a></li><li><a href="https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html" title="Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程">Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程</a></li><li><a href="https://tech.he-sb.top/posts/use-https-on-aria2/" title="使用 HTTPS 连接 Aria2">使用 HTTPS 连接 Aria2</a></li></ol>]]></content>
    
    
    <summary type="html">老司机不知道多久没下过片了，大概有好几年了，有人发了张车牌照，看上去很养眼……
那咱得去仔细研究下，发现下载速度堪忧，照这速度也不知道猴年马月能下载完。想想自己常年养着几个外网 VPS，也大都处于资源闲置状态，不如就此整个下载服务器。</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="晒酷软" scheme="https://sobaigu.com/tags/%E6%99%92%E9%85%B7%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 系统定时任务运行 shell</title>
    <link href="https://sobaigu.com/shell-run-with-cron-in-openwrt.html"/>
    <id>https://sobaigu.com/shell-run-with-cron-in-openwrt.html</id>
    <published>2023-11-08T11:34:27.000Z</published>
    <updated>2023-11-08T11:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某天在 YouTube 上打开小视频的时候，居然提示有广告屏蔽插件，要么停用屏蔽显示广告，要么买高级会员。</p><p>咱就是纯粹不想等待广告读秒，也不想中途突然跳出广告，根本不舍得买高级会员，所以想到在路由中屏蔽，smartdns 的广告过滤还蛮有效。</p><p>搞技术的都知道，这种东西是按配置不定期更新的，就是个你来我往，为了省事，就建了个 shell 脚本添加定时任务，没想在 OpenWrt 系统里和普通的 Linux 不太一样。</p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>先看 shell 内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line">logfile=<span class="string">&quot;/root/smartdns-update.log&quot;</span></span><br><span class="line">Ts=$(<span class="built_in">date</span> -R)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start work at <span class="variable">$Ts</span>&quot;</span> &gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /etc/smartdns/smartdns-a*.conf &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;befor------after&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line">antiad_src=<span class="string">&quot;https://anti-ad.net/anti-ad-for-smartdns.conf&quot;</span></span><br><span class="line">antiad_dst=<span class="string">&quot;smartdns-antiad.conf&quot;</span></span><br><span class="line">wget  --no-check-certificate <span class="variable">$&#123;antiad_src&#125;</span> -O <span class="variable">$&#123;antiad_dst&#125;</span> &amp;&amp; <span class="built_in">mv</span> -f <span class="variable">$&#123;antiad_dst&#125;</span> /etc/smartdns/<span class="variable">$&#123;antiad_dst&#125;</span></span><br><span class="line"></span><br><span class="line">adrules_src=<span class="string">&quot;https://adrules.top/smart-dns.conf&quot;</span></span><br><span class="line">adrules_dst=<span class="string">&quot;smartdns-adrules.conf&quot;</span></span><br><span class="line">wget  --no-check-certificate <span class="variable">$&#123;adrules_src&#125;</span> -O <span class="variable">$&#123;adrules_dst&#125;</span> &amp;&amp; <span class="built_in">mv</span> -f <span class="variable">$&#123;adrules_dst&#125;</span> /etc/smartdns/<span class="variable">$&#123;adrules_dst&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /etc/smartdns/smartdns-a*.conf &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line">smartdns restart</span><br><span class="line">Te=$(<span class="built_in">date</span> -R)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;smartdns has restarted at <span class="variable">$Te</span>&quot;</span> &gt;&gt;<span class="variable">$logfile</span></span><br></pre></td></tr></table></figure><p>脚本功能很纯粹，只是为了下载线上最新的配置并应用，手动执行功能没问题，但添加到路由定时任务后功能却未实现，使用 <code>logread -e cron</code> 可见定时任务执行过了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tue Nov  7 11:13:00 2023 cron.err crond[9487]: USER root pid 17170 cmd /root/smartdns-adblock.sh</span><br><span class="line">Tue Nov  7 11:14:00 2023 cron.err crond[9487]: user root: process already running: /root/smartdns-adblock.sh</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>一开始以为是路径的问题，但改成了绝对路径也一样的结果。原来 OpenWrt 中定时任务需要指定运行环境，最终添加的定时任务如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 6 * * * . /etc/profile; /root/smartdns-adblock.sh</span><br></pre></td></tr></table></figure><p>添加 <code>. /etc/profile;</code> 这段内容后，定时任务成功触发相应功能。</p>]]></content>
    
    
    <summary type="html">某天在 YouTube 上打开小视频的时候，居然提示有广告屏蔽插件，要么停用屏蔽显示广告，要么买高级会员。
咱就是纯粹不想等待广告读秒，也不想中途突然跳出广告，根本不舍得买高级会员，所以想到在路由中屏蔽，smartdns 的广告过滤还蛮有效。
搞技术的都知道，这种东西是按配置不定期更新的，就是个你来我往，为了省事，就建了个 shell 脚本添加定时任务，没想在 OpenWrt 系统里和普通的 Linux 不太一样。</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>git submodule 子模块管理实操</title>
    <link href="https://sobaigu.com/git-submodule-practice.html"/>
    <id>https://sobaigu.com/git-submodule-practice.html</id>
    <published>2023-10-13T12:16:45.000Z</published>
    <updated>2023-10-13T12:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目中经常包含别人维护的模块，在 <code>git</code> 中以子模块的形式引用提交，一些命令总是记不住，往往都是现用现查，干脆整理记录子模块相关的基础命令，懒得反复到处找。</p><h2 id="添加submodule"><a href="#添加submodule" class="headerlink" title="添加submodule"></a>添加submodule</h2><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;repo_url&gt; &lt;local_path&gt;</span><br></pre></td></tr></table></figure><p>一个实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add -b master --depth=1 https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</span><br><span class="line">Cloning into <span class="string">&#x27;C:/Users/Administrator/Documents/Git/hexoBlog/themes/fluid&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 214, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (214/214), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (202/202), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects: 100% (214/214), 536.96 KiB | 148.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 214 (delta 5), reused 88 (delta 2), pack-reused 0</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> .gitmodules.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br></pre></td></tr></table></figure><p>添加完成后，可以查看本地子模块状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule status</span><br><span class="line"> 15310a9d87a2300f9292dd66b2c243775d46f9c6 themes/fluid (v1.9.5-4-g15310a9)</span><br></pre></td></tr></table></figure><p>添加 <code>submodule</code> 后，会产生以下变化：</p><ol><li>在仓库根目录下生成一个 <code>.gitmodules</code>，文件，内容：<figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">path</span> = themes/fluid</span><br><span class="line"><span class="attr">url</span> = https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></pre></td></tr></table></figure></li><li>仓库配置 <code>.git/config</code> 中也会相应添加：<figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">url</span> = https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></pre></td></tr></table></figure></li><li>生成 <code>.git\modules\themes\fluid</code> 文件夹，存储的是自模块 git 版本管理信息</li></ol><p>最后，将本地变更提交同步到线上仓库就完成了。</p><h2 id="更新submodule"><a href="#更新submodule" class="headerlink" title="更新submodule"></a>更新submodule</h2><p><img src="/../images/vscode-hexo.png" alt="引自网络的图片示例"></p><p>当上游仓库有新版本时，我们可以在集成Git操作界面上拉取更新，也可以使用以下命令完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认只会克隆子模块目录，需要在项目根目录执行 init 命令完成子模块内容的同步</span></span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p>也可以用以下组合命令一次完成子模块更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>当然，我们在克隆主项目时可以同时将子模块一并拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules &lt;repo_url&gt; </span><br></pre></td></tr></table></figure><blockquote><p>当我们决定以 <code>submodule</code> 方式管理某个仓库时，建议相应 <code>submodule</code> 所有的增删改都单向操作，即：</p><ul><li>在主项目中，只单向从 <code>submodule</code> 上游拉取更新，其他所有的变更都该让 <code>submodule</code> 上游去完成</li></ul></blockquote><h2 id="修改submodule"><a href="#修改submodule" class="headerlink" title="修改submodule"></a>修改submodule</h2><p>有时候想变更 <code>submodule</code> 信息，我们可以删除后重新添加，也可以直接修改。</p><p>同样用上面的实例，找到前文添加子模块时所述的变更 <code>.gitmodules</code>，修改仓库 URL：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">path</span> = themes/fluid</span><br><span class="line"><span class="attr">url</span> = git@github.com:fluid-dev/hexo-theme-fluid.git <span class="comment">#新的 URL</span></span><br></pre></td></tr></table></figure><p>然后运行子模块同步命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule <span class="built_in">sync</span></span><br><span class="line">Synchronizing submodule url <span class="keyword">for</span> <span class="string">&#x27;themes/fluid&#x27;</span></span><br></pre></td></tr></table></figure><p>接下来将变更按 git 规范提交即可。当然，也可以用 <code>git submodule set-url</code> 命令来完成，有兴趣的自行摸索。</p><h2 id="删除submodule"><a href="#删除submodule" class="headerlink" title="删除submodule"></a>删除submodule</h2><p>删除子模块稍微复杂一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆初始化模块，其中&#123;MOD_NAME&#125;为模块目录，执行后可发现模块目录被清空</span></span><br><span class="line">git submodule deinit &#123;MOD_NAME&#125; </span><br><span class="line"><span class="comment"># 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &#123;MOD_NAME&#125; </span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Administrator@10_0_12_17 MINGW64 ~/Documents/Git/hexoBlog (main)</span><br><span class="line">$ git submodule deinit themes/fluid</span><br><span class="line">$ git <span class="built_in">rm</span> --cached themes/fluid</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;themes/fluid</span></span><br></pre></td></tr></table></figure><p>命令执行完将 <code>themes/fluid</code> 和 <code>.git/modules/themes/fluid</code> 目录删除，最后提交变更。</p><h2 id="git-submodule-命令总览"><a href="#git-submodule-命令总览" class="headerlink" title="git submodule 命令总览"></a>git submodule 命令总览</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> [<span class="built_in">--cached]</span></span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">add</span> [&lt;<span class="string">options</span>&gt;] [--] &lt;<span class="string">repository</span>&gt; [&lt;<span class="string">path</span>&gt;]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">status</span> [<span class="built_in">--cached]</span> [<span class="built_in">--recursive]</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">init</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">deinit</span> [-<span class="string">f</span>|<span class="built_in">--force]</span> (<span class="built_in">--all|[--]</span> &lt;<span class="string">path</span>&gt;…​)</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">update</span> [&lt;<span class="string">options</span>&gt;] [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="built_in">set-branch</span> [&lt;<span class="string">options</span>&gt;] [--] &lt;<span class="string">path</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="built_in">set-url</span> [--] &lt;<span class="string">path</span>&gt; &lt;<span class="string">newurl</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">summary</span> [&lt;<span class="string">options</span>&gt;] [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">foreach</span> [<span class="built_in">--recursive]</span> &lt;<span class="string">command</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">sync</span> [<span class="built_in">--recursive]</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">absorbgitdirs</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">项目中经常包含别人维护的模块，在 git 中以子模块的形式引用提交，一些命令总是记不住，往往都是现用现查，干脆整理记录子模块相关的基础命令，懒得反复到处找。</summary>
    
    
    
    <category term="攒知识" scheme="https://sobaigu.com/categories/%E6%94%92%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 及 NPM 依赖插件升级操作</title>
    <link href="https://sobaigu.com/update-hexo-npm-plugins.html"/>
    <id>https://sobaigu.com/update-hexo-npm-plugins.html</id>
    <published>2023-08-23T12:10:00.000Z</published>
    <updated>2023-08-23T12:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久前倒腾过<a href="/npm-node-update-self-in-linux.html">Linux环境下npm和node版本升级方法</a>，最近想把一直在用的 Hexo 升级下，居然有点生疏了，再次记录下。</p><h1 id="升级插件"><a href="#升级插件" class="headerlink" title="升级插件"></a>升级插件</h1><p>先全局安装 <code>npm-check</code> 和 <code>npm-upgrade</code>：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check <span class="built_in">npm</span>-upgrade</span><br></pre></td></tr></table></figure><p>安装完后，执行 <code>npm-check</code> 即可检查本地各插件版本情况：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm-check</span><br><span class="line"></span><br><span class="line">hexo-deployer-git  😕  NOTUSED?  Still using hexo-deployer-git?</span><br><span class="line">                                Depcheck did <span class="keyword">not</span> find code similar <span class="keyword">to</span> require(&#x27;hexo-deployer-git&#x27;) <span class="keyword">or</span> import <span class="keyword">from</span> &#x27;hexo-deployer-git&#x27;.</span><br><span class="line">                                Check your code <span class="keyword">before</span> removing <span class="keyword">as</span> depcheck <span class="keyword">isn&#x27;t</span> able <span class="keyword">to</span> foresee all ways dependencies can be used.</span><br><span class="line">                                Use rc <span class="built_in">file</span> options <span class="keyword">to</span> remove unused check, <span class="keyword">but</span> still monitor <span class="keyword">for</span> outdated <span class="built_in">version</span>:</span><br><span class="line">                                    .npmcheckrc &#123;<span class="string">&quot;depcheck&quot;</span>: &#123;<span class="string">&quot;ignoreMatches&quot;</span>: [<span class="string">&quot;hexo-deployer-git&quot;</span>]&#125;&#125;</span><br><span class="line">                                Use <span class="comment">--skip-unused to skip this check.</span></span><br><span class="line">                                To remove this package: npm uninstall hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>执行 <code>npm-upgrade</code> 可根据当前版本和最新版本比较，让用户确认和选择是否升级。<br>若用户确认升级，则会自动把 <code>package-lock.json</code> 和 <code>package.json</code> 文件内容进行更新后保存，然后执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">update</span> <span class="operator">-</span>g <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>上述命令执行完毕，则所有通过 <code>npm-upgrade</code> 确认的插件全部都升级到最新。升级完后通过 <code>hexo version</code> 验证 Hexo 版本。</p><h1 id="指定版本升级"><a href="#指定版本升级" class="headerlink" title="指定版本升级"></a>指定版本升级</h1><p>如果不想安装升级插件，也可以通过安装指定版本进行插件升级。</p><p>首先可以通过 <code>npm outdate</code> 命令查看有哪些版本，然后通过 <code>npm install package_name@package_version</code> 指定安装对应程序及版本，如果不指定版本，则相当于将指定程序下载最新版本重新安装一遍来实现升级。</p>]]></content>
    
    
    <summary type="html">很久前倒腾过Linux环境下npm和node版本升级方法，最近想把一直在用的 Hexo 升级下，居然有点生疏了，再次记录下。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://sobaigu.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>XrayR 后端一键对接 V2board 脚本</title>
    <link href="https://sobaigu.com/xrayr-auto-shell-for-v2board.html"/>
    <id>https://sobaigu.com/xrayr-auto-shell-for-v2board.html</id>
    <published>2023-06-06T09:12:50.000Z</published>
    <updated>2024-01-26T10:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有朋友「我也不知道是哪个不知名的网友了」找站长搭过一次 <code>V2board</code> 面板，也接触到了后端 XrayR，然后刚好目睹了脑残硬刚开源作者删库事件，虽然没有对外运营机场，但自己也偶尔需要爬墙头，索性就自个儿弄了个专用机场，关系户找来了也能给开个账号显得高大上！</p><p>也不知道是不是特别受照顾，私人专用机场都隔三差五被墙需要搬家，虽然只有 2 台节点服务器，但对咱这非专业人士需要维护劳动量也是巨大，每次改安装改配置都不能忍，索性就写了个脚本。</p><p>脚本功能虽然不完善，但好歹能用，经常见有人问起这啊那的，干脆把自用的这破程序放出来吧，有缘人自取。</p><blockquote><p>恰饭广告</p><ol><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="另一家虚拟信用卡，手续费相当，更适合美元消费">币圈必备：可以消费 USDC&#x2F;USDT 的信用卡 - OneKey Card</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Depay">币圈必备：可以消费 USDT 的预付信用卡 - Depay</a></li></ol></blockquote><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ol><li>一键配置并安装 XrayR</li><li>自动获取面板上指定的节点信息</li><li>自动 CloudFlare 解析节点域名</li><li>每日自动更换节点端口</li></ol><h1 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h1><p>脚本实现功能时，要求输入：</p><ol><li>V2board&#x2F;Xboard 面板接口域名和通讯密钥：面板上设置</li><li>V2board&#x2F;Xboard 面板上指定的节点ID和类型</li><li>V2board&#x2F;Xboard 面板数据库信息</li><li>CloudFlare 增删改域名解析权限 API Token：去 CloudFlare 控制台添加，具体方法查看 CloudFlare 帮助文档</li></ol><p>因为信息都是固定的，n 年难得变一次，索性偷懒到底，弄个如下一键命令实现信息复用：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> DB_Host=<span class="string">&quot;xx.xx.xx&quot;</span>          <span class="comment">//数据库远程访问地址，记得设置远程访问权限</span></span><br><span class="line"><span class="keyword">export</span> DB_Name=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> DB_User=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> DB_PWD=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> Api_Host=<span class="string">&quot;https://xx.xx.xx&quot;</span> <span class="comment">//面板接口，如果不支持https就用http</span></span><br><span class="line"><span class="keyword">export</span> Api_Key=<span class="string">&quot;xx&quot;</span>                <span class="comment">//面板通讯密钥</span></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">CF_TOKEN_DNS</span>=<span class="string">&quot;xx-xx-xx&quot;</span>     <span class="comment">//CloudFlare API Token</span></span><br></pre></td></tr></table></figure><blockquote><p>Xshell 上添加个命令按钮，组合上面这一套命令放一起完成就可以，直接和下方的脚本一起组合到一个按钮里都行</p></blockquote><p>每次运行 <code>xrayR_for_V2board.sh</code> 脚本前运行一遍上面的命令，就可以省去这部分的手动输入，最终就剩下输入节点 <code>ID</code> 和 <code>类型</code> 了。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>SSH 终端登录服务器，运行如下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y wget curl</span><br><span class="line">bash &lt;(curl -Ls https:<span class="regexp">//gi</span>thub.com<span class="regexp">/cdnf/</span>shell<span class="regexp">/raw/m</span>aster<span class="regexp">/proxy/</span>xrayR_for_V2board.sh)</span><br></pre></td></tr></table></figure><p>然后就能看到如下选择菜单，按提示完成后续的输入即可。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">======================================</span><br><span class="line">Author: 金三将军</span><br><span class="line">Version: 4.2.5</span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line"><span class="code">1.安装XrayR</span></span><br><span class="line"><span class="code">2.新增nodes</span></span><br><span class="line"><span class="code">3.开启定期更换端口</span></span><br><span class="line"><span class="code">4.开启系统Swap</span></span><br><span class="line"><span class="code">9.卸载XrayR</span></span><br><span class="line"><span class="code">0.退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入数字选项: </span><br></pre></td></tr></table></figure><p>选了开启定期更换端口功能后，会将自动更换端口脚本名称添加到系统命令，除每日自动任务运行外，也可以手动运行<code>autoPort</code> 命令即时更换。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@xx</span><span class="symbol">:~</span><span class="comment"># which autoPort </span></span><br><span class="line">/usr/bin/autoPort</span><br><span class="line">root<span class="variable">@xx</span><span class="symbol">:~</span><span class="comment"># cat /etc/crontab</span></span><br><span class="line"><span class="number">30</span> <span class="number">3</span> * * * root autoPort &gt;&gt; <span class="regexp">/dev/null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="支持自动解析和换端口"><a href="#支持自动解析和换端口" class="headerlink" title="支持自动解析和换端口"></a>支持自动解析和换端口</h2><p><code>自动域名解析</code> 和 <code>3.开启定期更换端口</code> 功能需要面板数据支持，所以需要在 V2board 面板节点接口 <code>app\Http\Controllers\Server\UniProxyController.php</code> 中额外添加如下信息返回：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line"><span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br></pre></td></tr></table></figure><p>最终代码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 后端获取配置</span></span><br><span class="line"> public function config(Request $request)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="title">switch</span> ($this-&gt;</span>nodeType) &#123;</span><br><span class="line">         case <span class="string">&#x27;shadowsocks&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;cipher&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher,</span><br><span class="line">                 <span class="string">&#x27;obfs&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>obfs,</span><br><span class="line">                 <span class="string">&#x27;obfs_settings&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>obfs_settings</span><br><span class="line">             ];</span><br><span class="line"></span><br><span class="line">             <span class="function"><span class="title">if</span> ($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher === <span class="string">&#x27;2022-blake3-aes-128-gcm&#x27;</span>) &#123;</span><br><span class="line">                 $<span class="function"><span class="title">response</span>[&#x27;server_key&#x27;] = Helper::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">16</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="function"><span class="title">if</span> ($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher === <span class="string">&#x27;2022-blake3-aes-256-gcm&#x27;</span>) &#123;</span><br><span class="line">                 $<span class="function"><span class="title">response</span>[&#x27;server_key&#x27;] = Helper::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">32</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;vmess&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;network&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>network,</span><br><span class="line">                 <span class="string">&#x27;networkSettings&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>networkSettings,</span><br><span class="line">                 <span class="string">&#x27;tls&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>tls</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;trojan&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;server_name&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_name,</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;hysteria&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;server_name&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_name,</span><br><span class="line">                 <span class="string">&#x27;up_mbps&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>up_mbps,</span><br><span class="line">                 <span class="string">&#x27;down_mbps&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>down_mbps,</span><br><span class="line">                 <span class="string">&#x27;obfs&#x27;</span> =&gt; H<span class="function"><span class="title">elper</span>::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">16</span>)</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这是个不完善的 shell，所以有问题也是正常的。如果不爽，自己去改去完善。</p><p>为了这个脚本能称心如意，站长特意去钻研了 jq，有兴趣的可以参考：<a href="/linux-jq-syntax-list.html">常用 linux jq 命令语法整理</a></p>]]></content>
    
    
    <summary type="html">之前有朋友「我也不知道是哪个不知名的网友了」找站长搭过一次 `V2board` 面板，也接触到了后端 XrayR，然后刚好目睹了脑残硬刚开源作者删库事件，虽然没有对外运营机场，但自己也偶尔需要爬墙头，索性就自个儿弄了个专用机场，关系户找来了也能给开个账号显得高大上！
也不知道是不是特别受照顾，私人专用机场都隔三差五被墙需要搬家，虽然只有 2 台节点服务器，但对咱这非专业人士需要维护劳动量也是巨大，每次改安装改配置都不能忍，索性就写了个脚本。
脚本功能虽然不完善，但好歹能用，经常见有人问起这啊那的，干脆把自用的这破程序放出来吧，有缘人自取。</summary>
    
    
    
    <category term="混X圈" scheme="https://sobaigu.com/categories/%E6%B7%B7X%E5%9C%88/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>币圈必备：可以消费 USDC/USDT 的预付信用卡 - OneKey Card</title>
    <link href="https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html"/>
    <id>https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html</id>
    <published>2023-05-12T10:39:59.000Z</published>
    <updated>2023-11-12T02:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍过一款<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay"> 可以消费 USDT 的虚拟信用卡</a>，支持微信线上购物和支付宝线下小额扫码，但随着用户基数扩大，加之阿麦利卡收紧银行监管，一些数字货币资产也随之列为高风险来源，导致 Dupay&#x2F;Depay 不定期不可用状态或者低限额，推荐同时备着另一个同类型虚拟信用卡 OneKey Card「本币消费只有充值手续费，额度高」。</p><p>本文关键词：消费USDT，USDC信用卡，数字货币信用卡，虚拟币出金卡，U币消费卡，openAI付费，美元信用卡</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OneKey Card 是硬件冷钱包厂商推出的一款虚拟信用卡「官网显示即将有实体卡」，首次开卡默认卡等级为 <code>白银</code>，支持 USDT 和 USDC <code>1:1</code> 充值入金，消费 <code>USD</code> 爽歪歪，中国大陆区支持支付宝、微信、拼夕夕、美团等 CNY 消费场景。</p><blockquote><p>现阶段新开卡消费时需要货币转换费，本币消费只有充值手续费，适合 ChatGPT Plus 订阅，openAI付费，国外买服务器域名等直接消费 USD 应用</p></blockquote><p>和 Depay 相比，整体大同小异，有多地区卡可选择，优选美国卡支持 openAI、ChatGPT Plus、GooglePlay、Amazon 等付款，不想作为主力也可以注册一个作为 Plan B，美元消费无手续费。</p><a href="https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html" target="_blank" title="OneKey Card">    <img border="0" height="400" width="auto" src="https://card.onekey.so/_next/static/media/multi_cards_and_transfer.75395586.png" /></a><h2 id="注册认证"><a href="#注册认证" class="headerlink" title="注册认证"></a>注册认证</h2><p>打开 <a href="https://card.onekey.so/?i=KKKSV5" title="点击或者注册时填入此授权码才可以">官网注册页</a> 「打不开就上梯子」，点击 【<code>sign in with Google</code>】，用 Google 的账号授权登录。</p><blockquote><p>OneKey Card 注册激活时需要填入邀请码：<code>KKKSV5</code></p></blockquote><p>注册完成后，首先会要求进行认证完成账户激活，按页面提示用微信或浏览器扫码完成一段活体录像认证即可。</p><img src="https://help.onekey.so/hc/article_attachments/7704559158927" alt="xcard1.png"><p>激活后，为了账号安全，需要开启谷歌验证码二次认证，安卓谷歌验证器推荐一个免费开源的 <a href="https://github.com/beemdevelopment/Aegis" title="免费开源软件">Aegis</a>，使用教程就懒得写了，直接贴 <a href="https://www.appinn.com/aegis-2fa-for-android/">墙内教程</a>，自行去下载安装使用，iOS 可以参考<a href="https://help.onekey.so/hc/zh-cn/articles/6739716879887" target="_blank" title="OneKey Card 中如何使用谷歌验证码"> OneKey官方帮助中心</a>，或者自行安装对应APP解决。</p><h2 id="充值-USDT-x2F-USDC-并兑换-USD"><a href="#充值-USDT-x2F-USDC-并兑换-USD" class="headerlink" title="充值 USDT&#x2F;USDC 并兑换 USD"></a>充值 <code>USDT</code>&#x2F;<code>USDC</code> 并兑换 <code>USD</code></h2><p>实名认证完成后，点击【<code>Top Up</code>&#x2F;<code>充值</code>】进行钱包充值，注意选择对应的链别充错了，公测阶段需要 <code>20 USD 以上</code>，建议宁多勿少。</p><p><img src="https://help.onekey.so/hc/article_attachments/7704515686543" alt="钱包充值激活"></p><p>充值到钱包的 <code>USDT</code>&#x2F;<code>USDC</code> 还需要兑换成 <code>USD</code> 才能划转到预付费卡进行消费：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559159951"></p><h2 id="添加卡片"><a href="#添加卡片" class="headerlink" title="添加卡片"></a>添加卡片</h2><p>充值完成后，回到账户主页，点击左上角 <code>Wallet</code>&#x2F;<code>钱包</code> 下拉添加卡片，根据您的使用场景选择需要开通的卡片：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559160079" alt="选择需要开通的卡片" title="选择卡片"></p><p>输入从钱包划转到消费卡的金额，点击 <code>添加卡片</code> 完成开卡：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559163279"></p><p>开卡完成后，点击 【<code>CVV</code>&#x2F;<code>安全码</code>】，通过二次安全验证后可以查看卡片所有信息。</p><h2 id="绑卡消费"><a href="#绑卡消费" class="headerlink" title="绑卡消费"></a>绑卡消费</h2><p>不管线上还是线下支付需要商家使用的 POS 机支持相应通道（Visa 或 Master），仅支持银联将无法支付。</p><h3 id="绑定支付宝"><a href="#绑定支付宝" class="headerlink" title="绑定支付宝"></a>绑定支付宝</h3><ol><li>打开支付宝，点击我的》银行卡</li><li>点击添加银行卡》输入开通的卡号</li><li>输入 姓名、日期、安全码</li><li>绑定完成</li></ol><p><img src="https://help.onekey.so/hc/article_attachments/6762367957775" alt="绑定支付宝"></p><h3 id="绑定微信"><a href="#绑定微信" class="headerlink" title="绑定微信"></a>绑定微信</h3><ol><li>打开微信，点击【我】&gt;【服务】》点击【钱包】</li><li>点击【银行卡】》点击 【添加银行卡】》输入支付密码</li><li>输入 <code>OneKey Card</code> 卡号</li><li>添加银行卡信息，账单地址信息根据自己实际情况填写</li><li>点击下一步，完成绑定</li></ol><p><img src="https://help.onekey.so/hc/article_attachments/6763126733327" alt="绑定微信"></p><p><strong>消费场景的要求</strong></p><ol><li>线下场景：使用微信支付，要看商家使用的POS机是否支持VISA通道，仅支持银联的那种是不行的。（即使支持微信支付，也不一定支持对应卡的通道）</li><li>线上场景：主要是看平台风控的要求，有些账户信誉好、消费频繁等等可能会允许使用，但是有些账户如果风险比较高的话会被风控拒绝。这个是线上商家使用的收单工具和风控的严松决定的。所以：<strong>建议慢慢养卡，首笔别用来充话费之类的虚拟物</strong>，后面就越用就越顺！</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>费用包含哪些？</p><p>以初始银卡为例：充值手续费&#x2F;法币转换费 2.1% + 月费 1 USD，明面上无其他费用（实际上非本币消费时会额外产生货币转换费，以开卡时显示为准）。</p><blockquote><p>公测期月费 0 USD，充值手续费 1.95%</p></blockquote></li><li><p>支持哪些充值&#x2F;入金途径？</p><p>以下列出的链可能部分还未支持，以官方充值页面实际支持为准。</p><table><thead><tr><th>币种</th><th>网络</th></tr></thead><tbody><tr><td>USDC</td><td>Avalanche C-Chain、Polygon、Tron、Ethereum、Algorand、valanche、Flow</td></tr><tr><td>USDT（即将支持）</td><td>Avalanche、Polygon、Tron、Ethereum</td></tr></tbody></table><p><code>Ethereum</code> 链转账手续费那叫一个贵（每笔大约11刀），建议用 <code>Avalanche C-Chain</code>（每笔0.8刀）、<code>Polygon</code>、<code>Tron</code>，没有现货的话可以在交易所币币交易后选择对应的链提币，可以看到对应的提币转账手续费。</p></li><li><p>OneKey Card 支持哪些支付场景？</p><table><thead><tr><th>支付渠道</th><th>详情</th></tr></thead><tbody><tr><td>支付宝</td><td>小额订单消费无需额外手续费；超过200元，支付宝收取3%手续费</td></tr><tr><td>淘宝</td><td>绑卡消费，任何金额都会收取 3% 手续费（系淘宝收取）</td></tr><tr><td>微信支付</td><td>京东、拼多多无额外手续费</td></tr><tr><td>美团</td><td>1. 绑定后每次点外卖需要另外输入CVV和有效日期<br> 2. 如果提示暂不支持该银行，直接在下一步输入CVV和有效日期即可</td></tr></tbody></table></li><li><p>当前支付的非中国大陆银行卡存在被盗风险，本次交易暂无法完成</p><p>正如前面提到的建议要养卡。首次使用如果出现风控，可以联系支付渠道客服申诉，跟客服说明情况，无法绑卡或者无法支付，提交 OneKey Card 首页截图，重点是理直气壮告知是本人的虚拟卡，详见<a href="https://help.onekey.so/hc/zh-cn/articles/6797958433039-%E6%94%AF%E4%BB%98%E5%AE%9D-%E5%BE%AE%E4%BF%A1-%E6%94%AF%E4%BB%98%E9%A3%8E%E6%8E%A7%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E-">官方说明</a>。</p></li></ol><p>其他更多请见 <a href="https://help.onekey.so/hc/zh-cn/articles/6726734682511-OneKey-Card-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">官方帮助常见问题</a></p><h2 id="本文关键词"><a href="#本文关键词" class="headerlink" title="本文关键词"></a>本文关键词</h2><p><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">消费USDT</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDC信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">数字货币信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟币出金卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">U币消费卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">ChatGPT会员订阅</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI付费</a></p><p><strong>解决的问题</strong>：</p><ol><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">交易所赚的 U币&#x2F;虚拟货币 怎么安全兑换法币使用？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么安全出金？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么用于消费？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">去哪搞支持 ChatGPT 会员订阅的外币信用卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI 付费被拒绝这么办？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟信用卡哪家好？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么兑换才不会被冻卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付怎么使用？</a></li></ol>]]></content>
    
    
    <summary type="html">OneKey Card 是硬件冷钱包厂商推出的一款虚拟信用卡「官网显示即将有实体卡」，首次开卡默认卡等级为`白银`，支持 USDT 和 USDC `1:1` 充值入金，消费 `USD` 爽歪歪，中国大陆区支持支付宝、微信、拼夕夕、美团等 CNY 消费场景。
和 Depay 相比，整体大同小异，有香港卡可选择，优选美国卡支持 ChatGPT Plus、GooglePlay、Amazon 等付款，不想作为主力也可以注册一个作为 Plan B，更适合美元消费。</summary>
    
    
    
    <category term="混X圈" scheme="https://sobaigu.com/categories/%E6%B7%B7X%E5%9C%88/"/>
    
    
    <category term="虚拟币" scheme="https://sobaigu.com/tags/%E8%99%9A%E6%8B%9F%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>shell中的一些特殊字符用法知识</title>
    <link href="https://sobaigu.com/shell-special-symbols.html"/>
    <id>https://sobaigu.com/shell-special-symbols.html</id>
    <published>2023-04-24T03:25:24.000Z</published>
    <updated>2023-04-24T03:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>shell越用越强大，一些特殊字符特殊用法比较难记，好记性不如烂笔头，网上摘抄的，留一份日后学习。很多事情其实是可以很好的处理的，一些小东西还是没必要引入python代码，直接shell自身就可以处理完成。</p><h1 id="获取文件名和后缀名"><a href="#获取文件名和后缀名" class="headerlink" title="${[#%]} 获取文件名和后缀名"></a><code>$&#123;[#%]&#125;</code> 获取文件名和后缀名</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">f=file.tar.gz</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;f##*.&#125;</span></span></span><br><span class="line">gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;f%%.*&#125;</span></span></span><br><span class="line">file</span><br></pre></td></tr></table></figure><p>假设我们定义了一个变量为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=/dir1/dir2/dir3/my.file.txt</span><br></pre></td></tr></table></figure><p>可以用 <code>$&#123;&#125;</code> 分别替换得到不同的值：</p><ul><li><code>$&#123;file#*/&#125;</code>：删掉第一个 <code>/</code> 及其左边的字符串：<code>dir1/dir2/dir3/my.file.txt</code></li><li><code>$&#123;file##*/&#125;</code>：删掉最后一个 <code>/</code> 及其左边的字符串：<code>my.file.txt</code></li><li><code>$&#123;file#*.&#125;</code>：删掉第一个 <code>.</code> 及其左边的字符串：<code>file.txt</code></li><li><code>$&#123;file##*.&#125;</code>：删掉最后一个 <code>.</code> 及其左边的字符串：<code>txt</code></li><li><code>$&#123;file%/*&#125;</code>：删掉最后一个 <code>/</code> 及其右边的字符串：<code>/dir1/dir2/dir3</code></li><li><code>$&#123;file%%/*&#125;</code>：删掉第一个 <code>/</code> 及其右边的字符串：空值</li><li><code>$&#123;file%.*&#125;</code>：删掉最后一个 <code>.</code> 及其右边的字符串：<code>/dir1/dir2/dir3/my.file</code></li><li><code>$&#123;file%%.*&#125;</code>：删掉第一个 <code>.</code> 及其右边的字符串：<code>/dir1/dir2/dir3/my</code></li></ul><blockquote><p>记忆的方法为：</p><ul><li><code>#</code> 是去掉左边（键盘上 <code>#</code> 在 <code>$</code> 的左边，从左向右删）</li><li><code>%</code> 是去掉右边（键盘上 <code>%</code> 在 <code>$</code> 的右边，从右向左删）</li><li>单一符号是最小匹配；两个符号是最大匹配</li></ul></blockquote><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://handerfly.github.io/shell/2019/04/03/shell%E7%BC%96%E7%A8%8B%E5%86%92%E5%8F%B7%E5%8A%A0-%E7%AD%89%E5%8F%B7-%E5%8A%A0%E5%8F%B7-%E5%87%8F%E5%8F%B7-%E9%97%AE%E5%8F%B7/">shell编程：冒号后面跟等号，加号，减号，问号的意义</a></li><li><a href="https://www.runoob.com/w3cnote/shell-special-char.html">Shell 中的特殊字符</a></li></ol>]]></content>
    
    
    <summary type="html">shell越用越强大，一些特殊字符特殊用法比较难记，好记性不如烂笔头，网上摘抄的，留一份日后学习。很多事情其实是可以很好的处理的，一些小东西还是没必要引入python代码，直接shell自身就可以处理完成。</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap菜单自动收缩隐藏</title>
    <link href="https://sobaigu.com/bootstrap-navbar-hide-after-scroll-click.html"/>
    <id>https://sobaigu.com/bootstrap-navbar-hide-after-scroll-click.html</id>
    <published>2023-03-21T09:34:37.000Z</published>
    <updated>2023-03-21T09:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有个姐姐找过来说，她的网站在手机界面下，点开导航菜单后，如果不再次点菜单按钮，导航弹出层就一直杵在那，有点不正常。</p><p>学艺不精，三脚猫功夫以为这是 Bootstrap 某个样式没有应用，可翻来翻去都没发现有滚动屏幕或点击其他区域自动收缩隐藏的功能。Google 后也有人有同样的疑问，说是原来点击菜单链接后菜单不自动收缩居然也是正常的Bootstrap 逻辑，有点不可思议。</p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p><img src="https://images2018.cnblogs.com/blog/1352798/201805/1352798-20180529232002296-632713344.gif" alt="菜单不隐藏"></p><p>从上图可知，该导航菜单浮层存在以下问题：</p><ol><li>屏幕滚动不会自动收缩</li><li>点击导航链接后不会自动收缩</li><li>点击导航菜单外的空白区域不会自动收缩</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>原导航菜单代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;nav-down responsive-nav hidden-lg hidden-md&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- navbutton for mobile --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed navbar-nav&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-target</span>=<span class="string">&quot;#main-nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--/.navbar-header--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-nav&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#featured&quot;</span>&gt;</span>Biography<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#projects&quot;</span>&gt;</span>Photo Gallery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#video&quot;</span>&gt;</span>Media<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#blog&quot;</span>&gt;</span>Upcoming Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#contact&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;.navbar-nav a&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后效果再次盗图：</p><p><img src="https://images2018.cnblogs.com/blog/1352798/201805/1352798-20180530003343691-361612275.gif" alt="滚动/点击菜单链接/点击其他区域菜单自动隐藏"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://www.cnblogs.com/Wudj/p/9108649.html">在小屏幕和手机屏幕下，Bootstrap导航栏的自动折叠隐藏</a></li></ol>]]></content>
    
    
    <summary type="html">有个姐姐找过来说，她的网站在手机界面下，点开导航菜单后，如果不再次点菜单按钮，导航弹出层就一直杵在那，有点不正常。
学艺不精，三脚猫功夫以为这是 Bootstrap 某个样式没有应用，可翻来翻去都没发现有滚动屏幕或点击其他区域自动收缩隐藏的功能。Google 后也有人有同样的疑问，说是原来点击菜单链接后菜单不自动收缩居然也是正常的Bootstrap 逻辑，有点不可思议。</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>币圈必备：可以消费 USDT 的预付信用卡 - Dupay/Depay</title>
    <link href="https://sobaigu.com/mastercad-visa-pay-with-usd-usdt.html"/>
    <id>https://sobaigu.com/mastercad-visa-pay-with-usd-usdt.html</id>
    <published>2023-03-12T10:39:59.000Z</published>
    <updated>2023-11-11T07:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Dupay（原名Depay） 虚拟信用卡「实际上是预付卡」支持 USDT「TRC20，Polygon，Bep20」加密货币充值，内置英镑、欧元和美元电子账户，可自由进行英镑、欧元、美元等法定货币与 USDT 的交易和转账，很好地解决了加密货币与法币之间的出金入金问题，杜绝传统加密货币出金遇黑钱冻卡现象，畅享无国界电子货币支付。</p><a href="https://dupay.one/web-app/register-h5?invitCode=359733&lang=zh-cn" target="_blank" title="Dupay Card">    <img border="0" height="400" width="auto" src="https://www.dupay.one/img/introduce3.png" /></a><p>Dupay（原名Depay） 是华人在英国开的公司做的产品，为个人解决加密货币多场景应用，国内支持微信，支付宝，美团等消费</p><p>在 Dupay 暂不可使用时，可以多 <a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="另一家虚拟信用卡，手续费相当，更适合美元消费">注册个 OneKey Card 当PLAN B</a>，狡兔三窟，有备无患。</p><h1 id="注册申请信用卡"><a href="#注册申请信用卡" class="headerlink" title="注册申请信用卡"></a>注册申请信用卡</h1><p>注册申请没门槛，只需要简单几步就完成：</p><ol><li>先 <a href="https://dupay.one/web-app/register-h5?invitCode=359733&lang=zh-cn"><strong>点此去注册</strong></a>「邀请码&#x2F;推荐人ID：<code>359733</code>，打不开就上梯子」一个账号，建议使用邮箱注册</li><li>注册完照提示安装 iOS 或 Android 端 APP</li><li>打开 APP，首先往 USDT 钱包地址里充币<ul><li>支持 USDT（选择支持的TRC20，Polygon，Bep20等链）</li><li>充值需＞5 USDT 才会入账</li><li>首次激活开卡需要＞10 USD</li><li>所需USDT消耗：交易所提币手续费 + USDT 开卡费 + USDT 兑 USD 磨损 + 充值 USD 到卡手续费</li><li>综上，建议<font color=red><strong>充值到Dupay钱包 50USDT 以上</strong></font></li></ul></li><li>在 APP 上按自己的需求申请对应等级信用卡，综合考量建议直接开通白金等级，申请 MasterCard 或 Visa</li><li>如果不是开 Lite 等级卡，需要完成 KYC，按照指示一步一步完成流程，只需几分钟系统自动完成</li><li>开完卡后，需要从钱包里将 USDT 兑换成美元充进卡里面才能看到对应卡号</li></ol><blockquote><p>不要向任何人暴露你的卡号，一些地方可以直接使用卡号小额消费，不验证 <code>CVV</code></p></blockquote><h2 id="英镑借记卡"><a href="#英镑借记卡" class="headerlink" title="英镑借记卡"></a>英镑借记卡</h2><table><thead><tr><th>MasterCard</th><th align="center">Lite</th><th align="center">标准</th><th align="center">高级</th><th align="center">白金</th><th align="center">黑金</th></tr></thead><tbody><tr><td>KYC费用（USDT）</td><td align="center">&#x2F;</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">&#x2F;</td></tr><tr><td>开卡费（USDT）</td><td align="center">&#x2F;</td><td align="center">0</td><td align="center">10</td><td align="center">50</td><td align="center">&#x2F;</td></tr><tr><td>月费（GBP）</td><td align="center">&#x2F;</td><td align="center">1</td><td align="center">0.5</td><td align="center">0</td><td align="center">&#x2F;</td></tr><tr><td>卡片充值费用</td><td align="center">&#x2F;</td><td align="center">1.80%</td><td align="center">1.60%</td><td align="center">1.40%</td><td align="center">&#x2F;</td></tr><tr><td>卡片额度&#x2F;月（GBP）</td><td align="center">&#x2F;</td><td align="center">5000</td><td align="center">10000</td><td align="center">200000</td><td align="center">&#x2F;</td></tr><tr><td>消费手续费</td><td align="center">&#x2F;</td><td align="center">0.50%</td><td align="center">0.50%</td><td align="center">0.50%</td><td align="center">&#x2F;</td></tr></tbody></table><h2 id="美元预付卡"><a href="#美元预付卡" class="headerlink" title="美元预付卡"></a>美元预付卡</h2><table><thead><tr><th>MasterCard</th><th align="center">Lite</th><th align="center">标准</th><th align="center">高级</th><th align="center">白金</th><th align="center">黑金</th></tr></thead><tbody><tr><td>KYC</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td>开卡费（USDT）</td><td align="center">30</td><td align="center">0</td><td align="center">20</td><td align="center">50</td><td align="center">&#x2F;</td></tr><tr><td>月费（USD）</td><td align="center">2</td><td align="center">1</td><td align="center">0.5</td><td align="center">0</td><td align="center">0</td></tr><tr><td>卡片充值费用</td><td align="center">2.50%</td><td align="center">1.80%</td><td align="center">1.60%</td><td align="center">1.40%</td><td align="center">1.20%</td></tr><tr><td>卡片额度&#x2F;月（USDT）</td><td align="center">5000</td><td align="center">20000</td><td align="center">50000</td><td align="center">200000</td><td align="center">&#x2F;</td></tr></tbody></table><table><thead><tr><th>Visa</th><th align="center">Lite</th><th align="center">标准</th><th align="center">高级</th><th align="center">白金</th><th align="center">黑金</th></tr></thead><tbody><tr><td>KYC</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td>开卡费（USDT）</td><td align="center">30</td><td align="center">0</td><td align="center">10</td><td align="center">50</td><td align="center">&#x2F;</td></tr><tr><td>月费（USD）</td><td align="center">2</td><td align="center">1</td><td align="center">0.5</td><td align="center">0</td><td align="center">0</td></tr><tr><td>卡片充值费用</td><td align="center">2.50%</td><td align="center">1.80%</td><td align="center">1.60%</td><td align="center">1.40%</td><td align="center">1.20%</td></tr><tr><td>卡片额度&#x2F;月（USDT）</td><td align="center">5000</td><td align="center">20000</td><td align="center">50000</td><td align="center">200000</td><td align="center">&#x2F;</td></tr></tbody></table><h2 id="费用总结"><a href="#费用总结" class="headerlink" title="费用总结"></a>费用总结</h2><p>Dupay 卡除去一次性开卡费，在日常使用中主要包含以下费用：</p><ol><li>转币磨损：从 USDT 兑换成 USD 过程中，实际不是 1:1 兑换，此处磨损 1%+，也就是转入 100 USDT，实际兑换到卡里为 98+ USD</li><li>充值费：如上表所示，兑换成 USD 后，需要充值到虚拟卡才能作为消费金额，此处按对应百分比收取</li><li>月费：如上表所示，每个月初从虚拟卡余额中扣取相应美元，余额不足会欠账，下次有余额则一次性划扣，官方称欠费超半年自动销卡</li><li>汇兑滑点：如果非 USD 消费，可以发现并不是实时汇率，CNY 消费大约会比当期汇率低 1%+</li></ol><p>综上，以 MasterCard 高级等级卡为例，日常 USDT 使用费率大约为 3%，在同类卡中费率相对低位。</p><h1 id="消费场景"><a href="#消费场景" class="headerlink" title="消费场景"></a>消费场景</h1><p>此美元外币预付信用卡在国内人民币支付场景中，可绑定微信和支付宝（支付宝200以上收3%手续费）、京东，支持京东购物、中石化&#x2F;中石油加油卡、美团外卖、滴滴打车、Paypal、天猫国际版、Q币充值、拼夕夕、猫眼电影票赛事、唯品会等知名交易服务，但线下商超支持的机会不多，所以存在不完美的地方。</p><ol><li>Dupay MasterCard 支持绑定支付宝、微信支付、美团外卖、拼夕夕、Paypal (国区、美区、港区)、天猫国际版等等</li><li>支持Stripe商户、<code>google play</code> 商店、<code>youtube premium</code>、Paypal 商户、美区苹果商店、和支持非3DS卡的电商网站</li><li>支持国内苹果官网直接绑卡购买iphone和mac，可能会打电话问询，直接说即可</li><li>暂不支持苹果支付 <code>APPLE PAY</code> 和 <code>Google PAY</code></li><li>支持 <code>ChatGPT PLUS</code> 会员扣费，需要你的支付环境，IP最好是原生IP(不一定要美国IP)，如果不行开无痕模式+全局模式切换IP多试几次</li><li>所有等级的卡（Lite、标准、高级、白金、黑金）都满足以上场景</li></ol><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Dupay如何绑定支付宝、美团、微信支付？"><a href="#Dupay如何绑定支付宝、美团、微信支付？" class="headerlink" title="Dupay如何绑定支付宝、美团、微信支付？"></a>Dupay如何绑定支付宝、美团、微信支付？</h2><ol><li>先往卡里充钱再绑定！先充钱再绑定！先充钱再绑定！</li><li>绑定支付宝跟添加其他银行卡一样，输入卡号，过期日期（月&#x2F;年）、CVV即可</li><li>绑定微信支付跟添加其他银行卡一样，输入卡号，过期日期（月&#x2F;年）、CVV即可</li><li>绑定美团支付，先绑定国内一张银行卡，关闭美团急速支付，然后下订单时候付款时候，切换付款方式，选择国际卡支付，添加 Dupay 的卡片号码信息即可每次点外卖时候需要输入 CVV 验证</li><li>账单地址全部填写国内实际地址即可</li><li>可以绑定美区 appstore，如果绑定不了切换美国IP在尝试一下，账单地址填写美国的最好，还是不行的话联系苹果官方客服，声明这个是美国虚拟卡。</li></ol><h2 id="Dupay绑定支付宝微信失败，或者使用时候失败怎么办？"><a href="#Dupay绑定支付宝微信失败，或者使用时候失败怎么办？" class="headerlink" title="Dupay绑定支付宝微信失败，或者使用时候失败怎么办？"></a>Dupay绑定支付宝微信失败，或者使用时候失败怎么办？</h2><ol><li>支付宝绑定失败，或者支付失败，请在支付宝界面联系在线人工客服「<strong>非人工发的那个入口一般都打不开</strong>」，告知存着的问题，然后根据客服要求操作，上传Dupay APP首页截图等解封即可。</li><li>微信绑定失败，或者支付失败怎么办，找到微信客服进行申诉，一般也是上传 Dupay APP 首页截图解决（注意文字说明 Dupay APP 截图上有你个人的拼音名字，客服有时候瞎看不到）,一直申诉不行，一直给差评，直到有客服打你电话或者你自己去打微信客服电话95017，说清楚这个是你的卡，有你的名字</li><li>美团无法支付？美团找客服解决，话术是：我自己的虚拟卡，我朋友都可以用</li><li>所有的解决风控问题，都是明确这是虚拟卡，这是你本人的，不是盗刷的，理直气壮一点</li></ol><h2 id="为什么会风控，怎么避免风控？"><a href="#为什么会风控，怎么避免风控？" class="headerlink" title="为什么会风控，怎么避免风控？"></a>为什么会风控，怎么避免风控？</h2><ol><li>这个是海外银行卡，国内支付工具一开始就把风险等级提高</li><li>绑定成功的<strong>第一笔消费不能消费虚拟产品</strong>，比如充值手机话费</li><li>可以在大商家内消费，比如KFC，肯德基微信小程序消费</li><li>不能一来直接刷大额，或者超过卡片余额的超额消费</li><li>支付宝和微信慢慢正常使用养卡，单次消费金额会越来越大</li><li>先充值再使用，可以省去很多麻烦，钱不够去刷触发商家风控后，以后你再充值可能都用不了了</li></ol><h2 id="Dupay日常使用建议"><a href="#Dupay日常使用建议" class="headerlink" title="Dupay日常使用建议"></a>Dupay日常使用建议</h2><ol><li>支付宝：适合线下被扫描抢扫，也可以自己扫商家二维码使用，日常线下买菜几乎适合所有的商家（注意不要频繁扫商家支付大额），超过200元需要支付3%手续费（支付宝收）</li><li>微信：适合在京东购物，拼夕夕购物，没有额外手续，线下二维码商家基本不支持（测试罗森便利店，永辉超市支持）</li><li>美团，适合点外卖，随便点；如果提示暂不支持该银行，直接选择，进行下一步输入过期日期和CVV，就支持了</li><li>京东、拼夕夕、淘宝 在购买部分虚拟商品和海外商品时 不支持此卡支付</li><li><strong>淘宝上和拼夕夕直接绑卡消费，无论多少金额都要收3%手续费</strong></li><li>这是一张消费卡，日常消费使用，不要老想套现，不科学，容易被风控</li></ol><h1 id="本文关键词"><a href="#本文关键词" class="headerlink" title="本文关键词"></a>本文关键词</h1><p><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">消费USDT</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDC信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">数字货币信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟币出金卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">U币消费卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">ChatGPT会员订阅</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI付费</a>，美元信用卡</p><p><strong>解决的问题</strong>：</p><ol><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">交易所赚的 U币&#x2F;虚拟货币 怎么安全兑换法币使用？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么安全出金？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么用于消费？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">去哪搞支持 ChatGPT 会员订阅的外币信用卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI 付费被拒绝这么办？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟信用卡哪家好？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT&#x2F;USDC 怎么兑换才不会被冻卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付怎么使用？</a></li></ol>]]></content>
    
    
    <summary type="html">Depay 虚拟信用卡「实际上是预付卡」支持 USDT「TRC20，Polygon，Bep20」 加密货币充值，内置英镑、欧元和美元电子账户，可自由进行英镑、欧元、美元等法定货币与 USDT 的交易和转账，很好地解决了加密货币与法币之间的出金入金问题，杜绝传统加密货币出金遇黑钱冻卡现象，畅享无国界电子货币支付。</summary>
    
    
    
    <category term="混X圈" scheme="https://sobaigu.com/categories/%E6%B7%B7X%E5%9C%88/"/>
    
    
    <category term="虚拟币" scheme="https://sobaigu.com/tags/%E8%99%9A%E6%8B%9F%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>阿里云VPS净化处理</title>
    <link href="https://sobaigu.com/vps-purge-aliyun-service.html"/>
    <id>https://sobaigu.com/vps-purge-aliyun-service.html</id>
    <published>2023-03-06T10:39:59.000Z</published>
    <updated>2023-03-06T10:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>默认购买的阿里云VPS都自带一个 <code>aliyundun</code> 和 <code>aliyun-service</code>，名字叫阿里云盾（安骑士），实质上是用来监控VPS是否安全，自动扫描进程、查杀病毒，会连接阿里云的漏洞扫描机，它会定期探测VPS是否存在已知漏洞。</p><p>这些，对咱其实没卵用，发现漏洞不花钱也修不了。24小时在后台扫描服务器硬盘，装点啥东西还都得让马云审阅一遍，想想就有点不舒服。</p><p>卸载清理掉才是最佳选择。</p><h1 id="删除清理"><a href="#删除清理" class="headerlink" title="删除清理"></a>删除清理</h1><p>运行以下命令卸载并清理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载阿里云盾（安骑士）</span></span><br><span class="line">bash &lt;(curl -sSL http://update.aegis.aliyun.com/download/uninstall.sh)</span><br><span class="line">bash &lt;(curl -sSL http://update.aegis.aliyun.com/download/quartz_uninstall.sh)</span><br><span class="line"><span class="comment"># 删除残留文件</span></span><br><span class="line">pkill aliyun-service</span><br><span class="line"><span class="built_in">rm</span> -fr /etc/init.d/agentwatch /usr/sbin/aliyun-service</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/aegis*</span><br></pre></td></tr></table></figure><p>卸载后可以查看自己云服务器进程，已经没有了 <code>AliYunDun</code>、<code>aliyun-service</code>、<code>AliYunDunUpdate</code> 三项表示净化完成。</p><h1 id="以前的文章"><a href="#以前的文章" class="headerlink" title="以前的文章"></a>以前的文章</h1><ol><li><a href="/windows-server-optimize-setting-basic.html">阿里云服务器Windows系统设置</a></li><li><a href="/AlibabaCloud-CentOS7-Pure-and-safe.html">阿里云服务器新开必做的几件事</a></li></ol>]]></content>
    
    
    <summary type="html">默认购买的阿里云VPS都自带一个 `aliyundun` 和 `aliyun-service`，名字叫阿里云盾（安骑士），实质上是用来监控VPS是否安全，自动扫描进程、查杀病毒，会连接阿里云的漏洞扫描机，它会定期探测VPS是否存在已知漏洞。
这些，对咱其实没卵用，发现漏洞不花钱也修不了。24小时在后台扫描服务器硬盘，装点啥东西还都得让马云审阅一遍，想想就有点不舒服。
卸载清理掉才是最佳选择。 </summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://sobaigu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Gunicorn + Nginx 项目自动启动方案</title>
    <link href="https://sobaigu.com/gunicorn-nginx-starter-online.html"/>
    <id>https://sobaigu.com/gunicorn-nginx-starter-online.html</id>
    <published>2023-02-28T06:09:50.000Z</published>
    <updated>2023-02-28T06:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚接触一个开源项目，用 <code>Gunicorn</code> 作为启动及 Web 服务程序，初次接触，整理了些资料，实现：项目自启动 + nginx 作为前端 Web服务，以备后用。</p><h1 id="Gunicorn-简介"><a href="#Gunicorn-简介" class="headerlink" title="Gunicorn 简介"></a>Gunicorn 简介</h1><p><code>Gunicorn（Green Unicorn）</code>是一个用于 UNIX 的 <code>Python WSGI HTTP</code> 服务器。<code>Gunicorn</code> 服务器广泛兼容各种 Web 框架，实现简单，服务器占用资源少，速度相当快。</p><p><code>Gunicorn</code> 没有依赖项，因此下载后可以很容易迁移到生产环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>直接在项目目录内，也就是 <code>manage.py</code> 所在的目录内执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn your_project.wsgi:application --<span class="built_in">bind</span> 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>即可启动生产级别的 Web 服务，前提是你的项目也是生产环境的配置，例如 <code>Debug = False</code>。</p><h1 id="方案组合"><a href="#方案组合" class="headerlink" title="方案组合"></a>方案组合</h1><ul><li>一般服务器上都装有 <code>nginx</code>，所以就用 <code>nginx</code> 反代到后端项目提供服务，</li><li>使用 <code>systemd</code> 监控管理 <code>Gunicorn</code></li><li><code>Gunicorn</code> 和 <code>nginx</code> 之间监听指定端口或用 <code>Unix sock</code> 通讯「推荐nginx 的 <code>conf</code> 文件中 不用代理 <code>ip:prot</code> 形式，而是代理 sock 文件。」</li></ul><p>根据以上罗列方案组合，需要建立以下文件：</p><ol><li>系统服务管理：<code>/etc/systemd/system/gunicorn.service</code></li><li>系统级别的套接字文件：<code>/etc/systemd/system/gunicorn.socket</code></li><li>nginx 的网站配置：<code>/etc/nginx/conf.d/domain.conf</code></li></ol><h2 id="系统服务管理：-etc-systemd-system-gunicorn-service"><a href="#系统服务管理：-etc-systemd-system-gunicorn-service" class="headerlink" title="系统服务管理：/etc/systemd/system/gunicorn.service"></a>系统服务管理：<code>/etc/systemd/system/gunicorn.service</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gunicorn daemon</span><br><span class="line">Requires=gunicorn.socket</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=www</span><br><span class="line">Group=www</span><br><span class="line"><span class="comment"># WorkingDirectory 是项目路径目录</span></span><br><span class="line">WorkingDirectory=/www/wwwroot/domain.com</span><br><span class="line"><span class="comment"># ExecStart=/www/wwwroot/domain.com/venv/bin/gunicorn \</span></span><br><span class="line"><span class="comment">#           --access-logfile - \</span></span><br><span class="line"><span class="comment">#           --workers 3 \</span></span><br><span class="line"><span class="comment">#           --bind unix:/run/gunicorn.sock \</span></span><br><span class="line"><span class="comment">#           myproject.wsgi:application</span></span><br><span class="line"><span class="comment"># 使用配置代替执行命令中的各种参数</span></span><br><span class="line"><span class="comment"># 原本在虚拟环境中要执行的 gunicorn -c gunicorn_conf.py main:app -k uvicorn.workers.UvicornWorker</span></span><br><span class="line"><span class="comment"># 其中 gunicorn 和 gunicorn_conf.py 要写完整的路径名称</span></span><br><span class="line">ExecStart=/www/wwwroot/domain.com/venv/bin/gunicorn -c /www/wwwroot/domain.com/gunicorn_conf.py main:app -k uvicorn.workers.UvicornWorker</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=mixed</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="系统级别的套接字文件：-etc-systemd-system-gunicorn-socket"><a href="#系统级别的套接字文件：-etc-systemd-system-gunicorn-socket" class="headerlink" title="系统级别的套接字文件：/etc/systemd/system/gunicorn.socket"></a>系统级别的套接字文件：<code>/etc/systemd/system/gunicorn.socket</code></h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Gunicorn socket</span><br><span class="line"></span><br><span class="line"><span class="section">[Socket]</span></span><br><span class="line"><span class="attr">ListenStream</span>=/run/gunicorn.sock</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=sockets.target</span><br></pre></td></tr></table></figure><p>这样我们就可以在系统启动的时候启动 <code>Gunicorn</code> 服务，也可以很方面的启动、停止、重启 <code>Gunicorn</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gunicorn</span><br><span class="line">systemctl start gunicorn</span><br><span class="line">systemctl stop gunicorn</span><br><span class="line">systemctl restart gunicorn</span><br></pre></td></tr></table></figure><p>查看服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status gunicorn.socket</span><br></pre></td></tr></table></figure><h2 id="gunicorn-conf-py"><a href="#gunicorn-conf-py" class="headerlink" title="gunicorn_conf.py"></a>gunicorn_conf.py</h2><p>为了后期更改方便，将 <code>Gunicorn</code> 参数写进配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据项目实际情况引入库</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># from gevent import monkey</span></span><br><span class="line"><span class="comment"># monkey.patch_all()</span></span><br><span class="line"><span class="comment"># import multiprocessing</span></span><br><span class="line"><span class="comment"># 生产环境记得关闭debug</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 修改代码时自动重启</span></span><br><span class="line">reload = <span class="literal">True</span></span><br><span class="line">reload_engine = <span class="string">&#x27;inotify&#x27;</span></span><br><span class="line"><span class="comment"># //绑定与Nginx通信的端口</span></span><br><span class="line"><span class="comment"># bind = &#x27;127.0.0.1:3002&#x27;</span></span><br><span class="line">bind = <span class="string">&#x27;unix:/run/gunicorn.sock&#x27;</span> <span class="comment">#与 /etc/systemd/system/gunicorn.socket 中对应</span></span><br><span class="line">pidfile = <span class="string">&#x27;log/gunicorn.pid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># workers = 4  # 进程数</span></span><br><span class="line">workers = multiprocessing.cpu_count() * <span class="number">2</span> + <span class="number">1</span> <span class="comment">#进程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># worker_class = &#x27;uvicorn.workers.UvicornWorker&#x27;  # 使用 unicorn ,不使用 gunicorn 自带的方式. unicorn相关文档: http://www.uvicorn.org/deployment/#running-gunicorn-worker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line"><span class="comment"># debug:调试级别，记录的信息最多；</span></span><br><span class="line"><span class="comment"># info:普通级别；</span></span><br><span class="line"><span class="comment"># warning:警告消息；</span></span><br><span class="line"><span class="comment"># error:错误消息；</span></span><br><span class="line"><span class="comment"># critical:严重错误消息；</span></span><br><span class="line">loglevel = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># 访问日志路径</span></span><br><span class="line">accesslog = <span class="string">&#x27;log/gunicorn_access.log&#x27;</span></span><br><span class="line"><span class="comment"># 错误日志路径</span></span><br><span class="line">errorlog = <span class="string">&#x27;log/gunicorn_error.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置gunicorn访问日志格式，错误日志无法设置.貌似无效</span></span><br><span class="line">access_log_format = <span class="string">&#x27;%(t)s %(p)s %(h)s &quot;%(r)s&quot; %(s)s %(L)s %(b)s %(f)s&quot; &quot;%(a)s&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="comment"># gunicorn -c gunicorn_conf.py main:app</span></span><br><span class="line"><span class="comment"># gunicorn -c gunicorn_conf.py main:app -k uvicorn.workers.UvicornWorker</span></span><br></pre></td></tr></table></figure><blockquote><p>实测使用 <code>supervisor</code> 守护进程常规方式无法启动，各种报错</p></blockquote><h2 id="nginx-的网站配置：domain-conf"><a href="#nginx-的网站配置：domain-conf" class="headerlink" title="nginx 的网站配置：domain.conf"></a>nginx 的网站配置：<code>domain.conf</code></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name server_domain_or_IP;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico <span class="punctuation">&#123;</span> access_log off; log_not_found off; <span class="punctuation">&#125;</span></span><br><span class="line">    location /static/ <span class="punctuation">&#123;</span></span><br><span class="line">        root /www/wwwroot/domain.com;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    location / <span class="punctuation">&#123;</span></span><br><span class="line">        include proxy_params;</span><br><span class="line">        proxy_pass http<span class="punctuation">:</span><span class="comment">//unix:/run/gunicorn.sock;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>nginx -t</code> 测试配置是否有误，<code>nginx -s reload</code> 重载配置让配置生效</p></blockquote><h1 id="Nginx-和-Gunicorn-故障排除"><a href="#Nginx-和-Gunicorn-故障排除" class="headerlink" title="Nginx 和 Gunicorn 故障排除"></a><code>Nginx</code> 和 <code>Gunicorn</code> 故障排除</h1><p>对于故障排除，日志可以帮助找到根本原因。检查以下日志可以帮助排除故障：</p><ul><li>查看 <code>Nginx</code> 进程日志：<code>journalctl -u nginx</code></li><li>查看 <code>Nginx</code> 访问日志：<code>less /var/log/nginx/access.log</code></li><li>检查 <code>Nginx</code> 错误日志：<code>less /var/log/nginx/error.log</code></li><li>检查 <code>Gunicorn</code> 应用程序日志：<code>journalctl -u gunicorn</code></li><li>检查 <code>Gunicorn</code> 套接字日志：<code>journalctl -u gunicorn.socket</code></li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://docs.gunicorn.org/en/stable/deploy.html">官方文档：Deploying Gunicorn</a></li><li><a href="https://segmentfault.com/a/1190000038360383">nginx+gunicorn+fastapi 部署自动后台启动</a></li><li><a href="https://cloud.tencent.com/developer/article/2139710">使用 nginx + gunicorn 来部署生产环境的 Django app</a></li><li><a href="https://www.cnblogs.com/tk091/archive/2014/07/22/3859514.html">django 部署，gunicorn、virtualenv、nginx</a></li></ol>]]></content>
    
    
    <summary type="html">`Gunicorn（Green Unicorn）`是一个用于 UNIX 的 `Python WSGI HTTP` 服务器。`Gunicorn` 服务器广泛兼容各种 Web 框架，实现简单，服务器占用资源少，速度相当快。
`Gunicorn` 没有依赖项，因此下载后可以很容易迁移到生产环境。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="混技能" scheme="https://sobaigu.com/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>手机短信接码验证码打码平台列表</title>
    <link href="https://sobaigu.com/platform-for-verify-code.html"/>
    <id>https://sobaigu.com/platform-for-verify-code.html</id>
    <published>2023-02-12T03:33:44.000Z</published>
    <updated>2023-02-12T03:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>别人整理的资源列表，平时撸活动需要用到，用处多多，至于怎么用就看各位的能力了。</p><p>本页信息仅作资料收藏用，所载第三方链接可能会失效，内容发生变更等，本站对其功能及使用产生的所有后果不承担任何责任，请自行斟酌</p><span id="more"></span><h1 id="短信验证码平台"><a href="#短信验证码平台" class="headerlink" title="短信验证码平台"></a>短信验证码平台</h1><blockquote><p>请点击以下标题链接打开相应接码平台</p></blockquote><h2 id="SMS-ACTIVATE"><a href="#SMS-ACTIVATE" class="headerlink" title="SMS-ACTIVATE"></a><a href="https://sms-activate.org/?ref=4213730">SMS-ACTIVATE</a></h2><p>最近比较火的接码平台，平台号码较多</p><ul><li>支持openAI，TG，Wechat，AlibabaCloud等注册接码</li><li>有中文页面</li><li>支持微信、支付宝、银联银行卡充值</li></ul><h2 id="老虎接码"><a href="#老虎接码" class="headerlink" title="老虎接码"></a><a href="https://tiger-sms.com/free">老虎接码</a></h2><p>据说是大平台5多年运营，热门冷门，量大量小都可接，按收到的验证码扣费。有API，有免费版，欧洲免费号。</p><h2 id="SMS-MAN"><a href="#SMS-MAN" class="headerlink" title="SMS-MAN"></a><a href="https://sms-man.com/cn?ref=GEPWPQnxBEZ7">SMS-MAN</a></h2><p>平台主营俄罗斯接码和号码租用，有近180个国家号码可选，有中文，美国英国荷兰实卡注册tg，WhatsApp，贝宝，亚马逊，Facebook</p><ul><li>支持支付宝充值</li><li>有电脑客户端</li><li>有很多国家的号码，支持的项目也很多，有中国、香港号码，有部分国内项目（微信、抖音、阿里巴巴、支付宝、微博、百度）</li></ul><h2 id="SMS-BUS"><a href="#SMS-BUS" class="headerlink" title="SMS-BUS"></a><a href="https://sms-bus.com/">SMS-BUS</a></h2><p>海外接码平台，拥有20多个国家号码资源，全平台号码超40万。可接 Telegram, Line, TikTok, Google, Yahoo, Microsoft, Vinted, PayPal, Shopee 等60多个项目。 价格实惠，Telegram 接码低至1元。 中文客服，支持支付宝和 USDT 充值（3美金起充），不来码不要钱，支持 API，可生成 url 接码链接供合作伙伴分销</p><h2 id="richpva"><a href="#richpva" class="headerlink" title="richpva"></a><a href="https://richpva.com/">richpva</a></h2><p>提供接码注册服务，微信，qq，飞机，抖音，京东，脸书，推特，飞机ws，tinder，gmail，instagram等国内外业务每日大量更新！充值支持微信，支付宝，USDT,等各种充值方式。</p><ul><li>有微信，支付宝充值（发卡站购买卡密）。充值5元起步</li><li>无法二次接码，接收短信的时间在1分钟到3分钟之间。</li></ul><h2 id="SMSReceiveFree"><a href="#SMSReceiveFree" class="headerlink" title="SMSReceiveFree"></a><a href="https://www.yunsms.xyz/">SMSReceiveFree</a></h2><p>国人运营的接码平台，有中国号和美国号。</p><h2 id="Free-Online-Phone"><a href="#Free-Online-Phone" class="headerlink" title="Free Online Phone"></a><a href="https://www.freeonlinephone.org/">Free Online Phone</a></h2><p>美加英免费接码，号码比较少</p><h1 id="语音验证码平台"><a href="#语音验证码平台" class="headerlink" title="语音验证码平台"></a>语音验证码平台</h1><p>暂无，欢迎联系站长推荐</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol><li><a href="https://blogcn.sms-man.com/how-to-create-weibo-without-phone-number-in-2021/?ref=jiema">如何注册其他国家的微博账号？</a></li><li><a href="https://sms-man.com/cn/blog/how-to-use-api-of-sms-man/?ref=jiema">sms-man接码如何利用API获取号码？</a></li><li><a href="https://233heji.com/28.html">接码平台合集</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;别人整理的资源列表，平时撸活动需要用到，用处多多，至于怎么用就看各位的能力了。&lt;/p&gt;
&lt;p&gt;本页信息仅作资料收藏用，所载第三方链接可能会失效，内容发生变更等，本站对其功能及使用产生的所有后果不承担任何责任，请自行斟酌&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="手机" scheme="https://sobaigu.com/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 怎么用 token 连接登录</title>
    <link href="https://sobaigu.com/github-verfy-with-token.html"/>
    <id>https://sobaigu.com/github-verfy-with-token.html</id>
    <published>2022-12-19T02:09:19.000Z</published>
    <updated>2022-12-19T02:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直用的好好的仓库，突然某一天提交的时候就死活连接认证失败了。之前知道 GitHub 取消了密码认证，可咱一直用的是 RSA 密钥啊。</p><p>以为换个 <code>ed25519</code> 密钥就能万事大吉，结果一样认证失败，提示 <code>timeout</code> 和没权限。经 <code>ssh -Tv git@github.com</code> 测试，新生成的密钥是能认证的，一时竟不知错在哪儿。</p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>仓库是用的 <code>ssh://</code> 远程地址，Git 操作仓库提示连接超时，上梯子也不行，配置 443 端口也同样的问题：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: <span class="keyword">connect</span> <span class="keyword">to</span> host github.com port <span class="number">22</span>: <span class="keyword">Connection</span> timed <span class="keyword">out</span></span><br><span class="line">fatal: Could <span class="keyword">not</span> <span class="keyword">read</span> <span class="keyword">from</span> remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct <span class="keyword">access</span> rights</span><br><span class="line"><span class="keyword">and</span> the repository <span class="keyword">exists</span>.</span><br></pre></td></tr></table></figure><blockquote><p>如果是用账号密码登录，那么将会有如下提示：<br>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed <span class="keyword">on</span> August 13, 2021. Please <span class="keyword">use</span> a <span class="keyword">personal</span> access <span class="keyword">token</span> instead.</span><br><span class="line"></span><br><span class="line">The requested URL returned <span class="keyword">error</span>: 403</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>新生成的 <code>ed25519</code> 测试的时候是通过的，但用的时候就是不成功，也懒得深究为什么了，干脆将远程地址改成了 <code>https://</code> ，顺手用一把 GitHub 的 <code>token</code> 。</p><blockquote><p>用浏览器登录认证也行，没什么好演示，生成 <code>token</code> 方式也没什么好演示的，在此不表</p></blockquote><h2 id="方式1：token-替代密码"><a href="#方式1：token-替代密码" class="headerlink" title="方式1：token 替代密码"></a>方式1：token 替代密码</h2><p>就是在需要输入密码的地方，把之前生成的 <code>token串</code> 粘贴到输入密码的位置，其他的就没区别，就如下图：</p><p><img src="https://img-blog.csdnimg.cn/5505a44f099b49568d25e3b254fbafca.png" alt="token替代密码输入"></p><h2 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h2><p>也可以把 <code>token</code> 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 <code>token</code> 了：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">origin</span> <span class="string">https</span>://<span class="string">TOKEN</span>@<span class="string">github</span>.<span class="string">com</span>/<span class="string">USERNAME</span>/<span class="string">REPO</span>.<span class="string">git</span></span><br></pre></td></tr></table></figure><ul><li>TOKEN：换成你自己得到的token</li><li>USERNAME：是你自己github的用户名</li><li>REPO：是你的仓库名称</li></ul><p>举个栗子：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">origin</span> <span class="string">https</span>://<span class="string">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</span>@<span class="string">github</span>.<span class="string">com</span>/<span class="string">shxxx</span>/<span class="string">xxx</span>.<span class="string">git</span>/</span><br></pre></td></tr></table></figure><h1 id="清除已保存账号密码"><a href="#清除已保存账号密码" class="headerlink" title="清除已保存账号密码"></a>清除已保存账号密码</h1><p>如果 <code>push</code> 等操作没有出现输入密码选项，请先输入如下命令，之后就可以看到输入密码选项了：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git config</span> <span class="literal">--</span><span class="comment">system</span> <span class="literal">--</span><span class="comment">unset credential</span><span class="string">.</span><span class="comment">helper</span></span><br></pre></td></tr></table></figure><blockquote><p>想起来要记一笔的时候，已经操作过了，不想重新操作，以上方法抄自：<a href="https://www.cnblogs.com/sggggr/p/15555228.html">星光夏眠</a></p></blockquote>]]></content>
    
    
    <summary type="html">一直用的好好的仓库，突然某一天提交的时候就死活连接认证失败了。之前知道 GitHub 取消了密码认证，可咱一直用的是 RSA 密钥啊。
以为换个 `ed25519` 密钥就能万事大吉，结果一样认证失败，提示 `timeout` 和没权限。经 `ssh -Tv git@github.com` 测试，新生成的密钥是能认证的，一时竟不知错在哪儿。</summary>
    
    
    
    <category term="攒知识" scheme="https://sobaigu.com/categories/%E6%94%92%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="混技能" scheme="https://sobaigu.com/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>解决aapanel/宝塔面板无法完成MySQL版本升级</title>
    <link href="https://sobaigu.com/update-mysql-fatal-error-in-aapanel.html"/>
    <id>https://sobaigu.com/update-mysql-fatal-error-in-aapanel.html</id>
    <published>2022-12-09T08:43:18.000Z</published>
    <updated>2022-12-09T08:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新换了服务器，装的 aapanel 面板，安装完各种环境没多久，就出现了可升级的提示，自然是点一遍 <code>update</code> ，<code>Nginx</code>，<code>Redis</code> 等都正常升级完了，可唯独 <code>MySQL</code> 一直没升级成功。</p><p>一直没功夫也就没在意，也就是多点一遍 <code>update</code> 就算了，空下来去看日志，发现每次 <code>MySQL</code> 都 <code>cmake</code> 到64%左右就失败了。</p><h1 id="失败现象"><a href="#失败现象" class="headerlink" title="失败现象"></a>失败现象</h1><p>在下载解压完资源后，会进入 <code>make</code> 编译阶段，每次都大约在64%的时候报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C++: fatal error: Killed signal terminated program cc1plus</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>然后编译就终止了，没有更多错误信息。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>网上说是机器内存不足，测试过增加虚拟内存后顺利编译完成。服务器是2G内存的小鸡鸡，那应该是真的内存不足导致，以下增加虚拟内存的方法自选其一即可完成。</p><h2 id="aapanel-通过-Linux-Tools-增加虚拟内存"><a href="#aapanel-通过-Linux-Tools-增加虚拟内存" class="headerlink" title="aapanel 通过 Linux Tools 增加虚拟内存"></a><code>aapanel</code> 通过 <code>Linux Tools</code> 增加虚拟内存</h2><p>如果装的 <code>aapanel</code> 或者宝塔，直接在应用商店安装 <code>Linux Tools</code> ，<code>启动后》Swap/virtual memory》填需要增加虚拟内存大小</code> 即可，一般系统会自带虚拟内存，我们可以将总虚拟内存增加到物理内存的2倍。</p><p>如果回头想删除增加的虚拟内容，那么在刚增加虚拟内存的地方，将增加虚拟内存大小填 <code>0</code> 后点确认提交即可恢复。</p><h2 id="通过命令管理虚拟内存"><a href="#通过命令管理虚拟内存" class="headerlink" title="通过命令管理虚拟内存"></a>通过命令管理虚拟内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分区路径</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/cache/swap/</span><br><span class="line"><span class="comment"># 设置分区的大小</span></span><br><span class="line"><span class="comment"># bs=64M是块大小，count=64是块数量，所以swap空间大小是bs*count=4096MB=4GB</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/var/cache/swap/swap0 bs=64M count=64</span><br><span class="line"><span class="comment"># 设置该目录权限</span></span><br><span class="line"><span class="built_in">chmod</span> 0600 /var/cache/swap/swap0</span><br><span class="line"><span class="comment"># 创建SWAP文件</span></span><br><span class="line">mkswap /var/cache/swap/swap0</span><br><span class="line"><span class="comment"># 激活SWAP文件</span></span><br><span class="line">swapon /var/cache/swap/swap0</span><br><span class="line"><span class="comment"># 查看SWAP信息是否正确</span></span><br><span class="line">swapon -s</span><br></pre></td></tr></table></figure><p>以上命令使用 <code>root</code> 用户执行，如果非 <code>root</code> 用户登录请自行添加 <code>sudo</code>。<code>swap0</code> 文件的路径在 <code>/var/cache/swap/</code> 下，编译完后, 如果不想要交换分区了, 可以删除。</p><p>删除交换分区的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff /var/cache/swap/swap0</span><br><span class="line"><span class="built_in">rm</span> /var/cache/swap/swap0</span><br></pre></td></tr></table></figure><p>释放空间命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#详细的用法：swapoff --help</span></span><br><span class="line">free -m <span class="comment">#查看当前内存使用情况</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">换了服务器，装的 aapanel 面板，安装完各种环境没多久，就出现了可升级的提示，自然是点一遍 `update` ，`Nginx`，`Redis` 等都正常升级完了，可唯独 `MySQL` 一直没升级成功。
一直没功夫也就没在意，也就是多点一遍 `update` 就算了，空下来去看日志，发现每次 `MySQL` 都 `cmake` 到64%左右就失败了。</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    <category term="Linux" scheme="https://sobaigu.com/tags/Linux/"/>
    
  </entry>
  
</feed>
